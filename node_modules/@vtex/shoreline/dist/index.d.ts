import * as react from 'react';
import react__default, { ReactNode, ComponentPropsWithoutRef, HTMLAttributes, ReactElement, MouseEventHandler, ComponentProps } from 'react';
import { ComboboxOptions, ComboboxPopoverOptions as ComboboxPopoverOptions$1, ComboboxItemOptions as ComboboxItemOptions$1, PopoverProps as PopoverProps$1, PopoverProviderProps, SelectStore, SelectProviderProps, SelectPopoverOptions as SelectPopoverOptions$1, MenuProviderProps as MenuProviderProps$1, RadioStore, TooltipProviderProps } from '@ariakit/react';
export { ComboboxProvider, PopoverProvider, PopoverProviderProps, SelectProvider, TabProvider, TabProviderProps, TooltipProvider, TooltipProviderProps, usePopoverContext, usePopoverStore, useSelectContext, useSelectStore, useTabContext, useTabStore } from '@ariakit/react';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { RenderProps, CSSProperty, Store } from '@vtex/shoreline-utils';
export { AnyFunction, AnyObject, CSSAbsoluteUnit, CSSGlobals, CSSProperties, CSSProperty, CSSPseudoSelectors, CSSRelativeUnit, CSSUnit, CSSValueAutocomplete, CSSValueWithUnit, Dict, ElementWithRef, LiteralUnion, NullToObject, Primitive, Recursive, RenderProps, Store, StripEnums, TupleTypes, UnionToIntersection, camelCase, canUseDOM, chain, cleanTokenString, constants, cssVar, cx, flattenObject, forwardRef, hasSomeTextSelected, invariant, isFunction, isNativeHandler, isString, isStringEmpty, isToken, isUppercase, kebabCase, lowerFirst, merge, mergeProps, mergeRefs, parseTokens, pascalCase, shallowCompare, snakeCase, splitByCase, style, toVar, upperFirst, useControlledState, useId, useMergeRef, useSafeLayoutEffect, useStore, warning } from '@vtex/shoreline-utils';
import { Drawer } from 'vaul';
import { DefaultToastOptions } from 'react-hot-toast/headless';
import { AriaDatePickerProps, AriaDateFieldProps, AriaDateRangePickerProps, TimeValue, AriaTimeFieldProps } from '@react-aria/datepicker';
import { DateValue, AriaRangeCalendarProps, AriaCalendarProps, AriaCalendarGridProps } from '@react-aria/calendar';
import { DateValue as DateValue$1, CalendarDate } from '@internationalized/date';
export { CalendarDate, DateValue, Time, createCalendar, getLocalTimeZone, getWeeksInMonth, isSameDay, isSameMonth, isSameYear, parseAbsoluteToLocal, parseDate, parseDateTime, parseTime, parseZonedDateTime, today } from '@internationalized/date';
import { CalendarState, RangeCalendarState } from '@react-stately/calendar';
import { DateSegment as DateSegment$1, DateFieldState } from '@react-stately/datepicker';
import { ShorelineConfig } from '@vtex/shoreline-css';

/**
 * Makes icons accessible by adding a label. It can be used with Shoreline icons or other svg.
 * @example
 * <AccessibleIcon>
 *  <svg
 *     data-sl-icon
 *     width="20"
 *     height="20"
 *     viewBox="0 0 20 20"
 *     fill="none"
 *     xmlns="http://www.w3.org/2000/svg"
 *     aria-hidden
 *     focusable={false}
 *   >
 *     <path
 *       d="M5 6.875L1.25 10L5 13.125"
 *       stroke="currentColor"
 *       strokeWidth="1.5"
 *       strokeLinecap="round"
 *       strokeLinejoin="round"
 *     />
 *     <path
 *       d="M15 6.875L18.75 10L15 13.125"
 *       stroke="currentColor"
 *       strokeWidth="1.5"
 *       strokeLinecap="round"
 *       strokeLinejoin="round"
 *     />
 *     <path
 *       d="M12.5 3.125L7.5 16.875"
 *       stroke="currentColor"
 *       strokeWidth="1.5"
 *       strokeLinecap="round"
 *       strokeLinejoin="round"
 *     />
 *   </svg>
 * </AccessibleIcon>
 */
declare const AccessibleIcon: react.ForwardRefExoticComponent<AccessibleIconOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface AccessibleIconOptions {
    /**
     * Icon description
     */
    label: ReactNode;
    /**
     * Component children, normally a <svg />.
     */
    children?: ReactNode;
}
type AccessibleIconProps = AccessibleIconOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Represents clickable surfaces
 * @example
 * <Clickable>
 *   Text <button>Click Me</button>
 * </Clickable>
 */
declare const Clickable: react__default.ForwardRefExoticComponent<ClickableOptions & Omit<react__default.DetailedHTMLProps<react__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react__default.RefAttributes<HTMLDivElement>>;
interface ClickableOptions {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
}
type ClickableProps = ClickableOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Bubbles events to Clickable
 * @example
 * <Clickable>
 *  <ClickableBubble>
 *    <p>Clicking the text will bubble the Click event to Clickable</p>
 *  </ClickableBubble>
 * </Clickable>
 */
declare const ClickableBubble: react.ForwardRefExoticComponent<ClickableBubbleOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface ClickableBubbleOptions {
    /**
     * Children to bubble event
     */
    children: ReactNode;
    /**
     * if true only immediate children will bubble the event
     * if false the immediate children and their children will bubble the event
     *
     * @default false
     */
    onlyImmediateChild?: boolean;
}
type ClickableBubbleProps = ClickableBubbleOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Renders a combobox input
 */
declare const ComboboxInput: react.ForwardRefExoticComponent<ComboboxInputOptions & Omit<react.DetailedHTMLProps<react.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & react.RefAttributes<HTMLInputElement>>;
interface ComboboxInputOptions extends Pick<ComboboxOptions, 'autoSelect'> {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
}
type ComboboxInputProps = ComboboxInputOptions & ComponentPropsWithoutRef<'input'>;

/**
 * Renders a popover for the combobox
 */
declare const ComboboxPopover: react.ForwardRefExoticComponent<ComboboxPopoverOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface ComboboxPopoverOptions extends Pick<ComboboxPopoverOptions$1, 'sameWidth'> {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
}
type ComboboxPopoverProps = ComboboxPopoverOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Renders an item for the combobox
 */
declare const ComboboxItem: react.ForwardRefExoticComponent<ComboboxItemOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface ComboboxItemOptions extends Pick<ComboboxItemOptions$1, 'value' | 'disabled'> {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
}
type ComboboxItemProps = ComboboxItemOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Renders a list for the combobox
 */
declare const ComboboxList: react.ForwardRefExoticComponent<ComboboxListOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface ComboboxListOptions extends ComponentPropsWithoutRef<'div'> {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
}
type ComboboxListProps = ComboboxListOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Composes immediate child with its props and child own props.
 * Used to implement Shoreline composition
 * @example
 * function Button({ asChild, ...props }){
 *  const Composition = asChild ? Compose : 'button'
 *  return <Composition {...props} />
 * }
 */
declare const Compose: react.ForwardRefExoticComponent<ComposeOptions & HTMLAttributes<HTMLElement> & react.RefAttributes<any>>;
interface ComposeOptions {
    /**
     * Children to compose
     */
    children?: ReactNode;
}
type ComposeProps = ComposeOptions & HTMLAttributes<HTMLElement>;

/**
 * Defines a composable child inside of a Compose component
 * @example
 * function Button({ asChild, children, ...props }){
 *  const Composition = asChild ? Compose : 'button'
 *  return (
 *    <Composition {...props}>
 *      Prefix <Composable>{children}</Composable>
 *    </Composition>
 *  )
 * }
 */
declare function Composable(props: ComposableProps): react_jsx_runtime.JSX.Element;
declare function isComposable(child: ReactNode): child is ReactElement;
interface ComposableOptions {
    /**
     * Render function. Use it to wrap the root with containers
     */
    render?: RenderProps;
    /**
     * Defines the composition root
     */
    children: ReactNode;
}
type ComposableProps = ComposableOptions;

/**
 * Navigate to a link using javascript
 * @param href The URL that the hyperlink points to.
 * @param target Where to display the linked URL
 * @returns
 */
declare function navigate(href: string, target?: NavigationTarget): void;
type NavigationTarget = '_blank' | '_self' | '_parent' | '_top';

/**
 * A container that acts as a link. It allows text selection and stop its children event propagation.
 * @example
 * <LinkBox href="">
 *   <div>
 *     <a>...</a>
 *   </div>
 *   <button>...</button>
 * </LinkBox>
 */
declare const LinkBox: (props: LinkBoxOptions & Omit<ClickableProps, "onClick"> & react.RefAttributes<HTMLDivElement>) => JSX.Element | null;
interface LinkBoxOptions {
    /**
     * The URL that the hyperlink points to.
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href
     */
    href: string;
    /**
     * Where to display the linked URL
     * @default '_parent'
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target
     */
    target?: NavigationTarget;
}
type LinkBoxProps = LinkBoxOptions & Omit<ClickableProps, 'onClick'>;

/**
 * Gets value of the locale from Context
 * @example
 * const locale = useLocale()
 */
declare function useLocale(): string;

/**
 * Provides the locale
 * @example
 * <LocaleProvider locale="pt-BR">
 *  ...
 * </LocaleProvider>
 */
declare function LocaleProvider(props: LocaleProviderProps): react_jsx_runtime.JSX.Element;
interface LocaleProviderOptions {
    /**
     * The BCP47 language code for the locale.
     * @link https://www.ietf.org/rfc/bcp/bcp47.txt
     */
    locale?: string;
    /**
     * Component children
     */
    children?: ReactNode;
}
type LocaleProviderProps = LocaleProviderOptions;

/**
 * Create a Hook that extracts messages from the passed object
 * @example
 * const messages = {
 *   'en-US': {
 *     test: 'Test'
 *   },
 *   'pt-BR': {
 *     test: 'Teste'
 *   }
 * }
 *
 * const useMessage = createMessageHook(messages)
 * const getMessage - useMessage()
 * getMessage('test')
 */
declare function createMessageHook(messages: Record<string, Record<string, string>>): (overrides?: Record<string, string>) => (id: string, variables?: Record<string, string | number>) => string;

/**
 * Renders an element that is visually only to screen readers
 * @example
 * <a href="#">
 *  Learn more<VisuallyHidden> about brazilian beaches</VisuallyHidden>
 * </a>
 */
declare const VisuallyHidden: react.ForwardRefExoticComponent<VisuallyHiddenOptions & react.RefAttributes<HTMLDivElement>>;
interface VisuallyHiddenOptions {
    /**
     * Content that will be only available for a screen reader
     */
    children?: ReactNode;
}
type VisuallyHiddenProps = VisuallyHiddenOptions;

/**
 * Alerts call attention to a semantic message and load alongside the rest of the page content. They can optionally be dismissed upon user action.
 * @status stable
 * @example
 * <Alert onDismiss={() => {}}>
 *  <Text variant="body">Message</Text>
 *  <Button variant="tertiary">Action</Button>
 * </Alert>
 */
declare const Alert: react.ForwardRefExoticComponent<AlertOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface AlertOptions {
    /**
     * Variants of the alert, one of: informational, success, critical, warning.
     * @default 'informational'
     */
    variant?: 'informational' | 'success' | 'critical' | 'warning';
    /**
     * Callback fired when the alert is dismissed.
     */
    onDismiss?: MouseEventHandler<HTMLButtonElement>;
}
type AlertProps = AlertOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Allows the content to bleed into the external container
 * @example
 * <Bleed top="$space-2" bottom="$space-2">
 *   <Button>Text</Button>
 * </Bleed>
 */
declare const Bleed: react.ForwardRefExoticComponent<BleedOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface BleedOptions {
    /**
     * Top bleed
     * @default '$space-0'
     */
    top?: string;
    /**
     * Bottom bleed
     * @default '$space-0'
     */
    bottom?: string;
    /**
     * Start bleed
     * @default '$space-0'
     */
    start?: string;
    /**
     * End bleed
     * @default '$space-0'
     */
    end?: string;
}
type BleedProps = BleedOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Buttons with labels represent the most important actions that users frequently trigger. They can vary in prominence and can include an icon.
 * @status stable
 * @example
 * <Button>Action label</Button>
 */
declare const Button: react.ForwardRefExoticComponent<ButtonOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
interface ButtonOptions {
    /**
     * Button contents
     */
    children: ReactNode;
    /**
     * Increase or decrease padding.
     * @default 'normal'
     */
    size?: 'normal' | 'large';
    /**
     * Change between color combinations.
     * @default 'secondary'
     */
    variant?: 'primary' | 'secondary' | 'tertiary' | 'critical' | 'criticalTertiary';
    /**
     * Disable the button and show a spinner.
     * @default false
     */
    loading?: boolean;
    /**
     * Merge button props with immediate child.
     * @default false
     */
    asChild?: boolean;
}
type ButtonProps = ButtonOptions & ComponentPropsWithoutRef<'button'>;

/**
 * Centralizes its content
 * @example
 * <Center>
 *  <Text>In the absolute center</Text>
 * </Center>
 */
declare const Center: react.ForwardRefExoticComponent<CenterOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface CenterOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type CenterProps = CenterOptions & ComponentPropsWithoutRef<'div'>;

/**
 * A single Checkbox represents binary choices, such as accepting terms and conditions or activating and deactivating notifications.
 * @status stable
 * @example
 * <Checkbox>Label</Checkbox>
 */
declare const Checkbox: react.ForwardRefExoticComponent<CheckboxOptions & Omit<Omit<react.DetailedHTMLProps<react.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref">, "value"> & react.RefAttributes<HTMLDivElement>>;
interface CheckboxOptions {
    /**
     * Indicates the indeterminate state
     * @default
     */
    indeterminate?: boolean;
    /**
     * Indicator value
     */
    value?: string;
}
type CheckboxProps = CheckboxOptions & Omit<ComponentPropsWithoutRef<'input'>, 'value'>;

/**
 * A group of Checkboxes includes five independent choices at most. Each option is binary and they can be listed horizontally or vertically.
 * @status stable
 * @example
 * <CheckboxGroup label="Checkbox group">
 *  <Checkbox value="1">Option 1</Checkbox>
 *  <Checkbox value="2">Option 2</Checkbox>
 * </CheckboxGroup>
 */
declare const CheckboxGroup: react.ForwardRefExoticComponent<CheckboxGroupOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLInputElement>>;
interface CheckboxGroupOptions {
    /**
     * Whether the checkbox group is in an error state
     */
    error?: boolean;
    /**
     * Checkbox group description
     */
    description?: ReactNode;
    /**
     * Checkbox group error message
     */
    errorText?: ReactNode;
    /**
     * Checkbox group label
     */
    label: ReactNode;
    /**
     * Whether the checkbox group is horizontal or vertical
     * @default false
     */
    horizontal?: boolean;
}
type CheckboxGroupProps = CheckboxGroupOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Collection combines a list of items with controls for the view. The list can be a Table and the controls can be a Search, Filters, and Pagination.
 * @status stable
 * @example
 * <Collection>
 *  <CollectionRow>
 *    <Search />
 *    <Pagination page={1} total={74} />
 *  </CollectionRow>
 *  <CollectionView status="ready">
 *    <div className="ready-view" />
 *  </CollectionView>
 *  <CollectionRow align="flex-end">
 *    <Pagination page={1} total={74} />
 *  </CollectionRow>
 * </Collection>
 */
declare const Collection: react.ForwardRefExoticComponent<CollectionOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface CollectionOptions {
    /**
     * Component children
     */
    children?: ReactNode;
}
type CollectionProps = CollectionOptions & ComponentPropsWithoutRef<'div'>;

/**
 * A collection view is a component that renders a collection based on its status
 * @status stable
 * @example
 * <Collection>
 *    <CollectionView status="loading" />
 * </Collection>
 */
declare const CollectionView: react.ForwardRefExoticComponent<CollectionViewOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface CollectionViewOptions {
    /**
     * Represents the status of a collection and indicates what should be rendered
     * @default 'ready'
     */
    status: 'ready' | 'error' | 'loading' | 'empty' | 'not-found' | 'unauthorized';
    /**
     * On status error action callback
     */
    onError?: () => void;
    /**
     * On status empty action callback
     */
    onEmpty?: () => void;
    /**
     * Collection internal messages
     */
    messages?: CollectionMessages;
}
type CollectionViewProps = CollectionViewOptions & ComponentPropsWithoutRef<'div'>;
type CollectionMessages = Partial<{
    [key in CollectionMessagesKeys]: string;
}>;
/**
 * Collection internal messages intl keys
 */
type CollectionMessagesKeys = 'not-found-heading' | 'not-found-description' | 'empty-heading' | 'empty-description' | 'empty-action' | 'error-heading' | 'error-action' | 'unauthorized-heading' | 'unauthorized-description';

/**
 * Flexbox layout
 * @see https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox
 * @example
 * <Flex>
 *  <Button>Clear</Button>
 *  <Button variant="primary">Submit</Button>
 * </Flex>
 */
declare const Flex: react.ForwardRefExoticComponent<FlexOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface FlexOptions {
    /**
     * CSS order
     * @default 0
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/order
     */
    order?: CSSProperty.Order;
    /**
     * CSS flex-direction
     * @default 'row'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
     */
    direction?: CSSProperty.FlexDirection;
    /**
     * CSS flex-grow
     * @default 0
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow
     */
    grow?: CSSProperty.FlexGrow;
    /**
     * CSS flex-wrap
     * @default 'nowrap'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
     */
    wrap?: CSSProperty.FlexWrap;
    /**
     * CSS flex-shrink
     * @default 1
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink
     */
    shrink?: CSSProperty.FlexShrink;
    /**
     * CSS flex-basis
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
     */
    basis?: CSSProperty.FlexBasis;
    /**
     * CSS justify-content
     * @default 'flex-start'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
     */
    justify?: CSSProperty.JustifyContent;
    /**
     * CSS align-items
     * @default 'stretch'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
     */
    align?: CSSProperty.AlignItems;
    /**
     * CSS Gap
     * @default '$space-gap'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/gap
     */
    gap?: CSSProperty.Gap;
    /**
     * Use `inline-flex` instead of `flex`
     * @default false
     */
    inline?: boolean;
    /**
     * Children composition
     * @default false
     * @example
     * <Flex asChild>
     *  <button>
     *    A flex button
     *  </button>
     * </Flex>
     */
    asChild?: boolean;
}
type FlexProps = FlexOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Row of the collection
 * @status stable
 */
declare const CollectionRow: (props: CollectionRowOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>) => JSX.Element | null;
interface CollectionRowOptions extends Pick<FlexOptions, 'gap' | 'align' | 'justify' | 'direction'> {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type CollectionRowProps = CollectionRowOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Confirmation Modals appear after users attempt to trigger an action with an effect that is irreversible or hard to reverse, such as deleting items.
 * @status stable
 * @example
 *  const [open, setOpen] = useState(false)
 *
 *  const handleClose = () => {
 *   setOpen(false)
 *  }
 *
 *  <Button onClick={() => setOpen((open) => !open)}>
 *    Open confirmation modal
 *  </Button>
 *  <ConfirmationModal
 *    open={open}
 *    onClose={handleClose}
 *    onConfirm={handleClose}
 *    onCancel={handleClose}
 *  >
 *    <Text variant="body">Hello world</Text>
 *  </ConfirmationModal>
 */
declare const ConfirmationModal: react__default.ForwardRefExoticComponent<ConfirmationModalOptions & Omit<react__default.DetailedHTMLProps<react__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react__default.RefAttributes<HTMLDivElement>>;
interface ConfirmationModalOptions {
    /**
     * Callback fired when the backdrop or close button is clicked.
     */
    onClose?: (event: Event) => void;
    /**
     * Callback fired when the ok button is clicked.
     */
    onConfirm?: react__default.MouseEventHandler<HTMLButtonElement>;
    /**
     * Callback fired when the cancel button is clicked.
     */
    onCancel?: react__default.MouseEventHandler<HTMLButtonElement>;
    /**
     * Whether the modal is open or not.
     * @default false
     */
    open?: boolean;
    /**
     * Whether the confirm actions is disabled.
     * @default false
     */
    disabled?: boolean;
    /**
     * Whether the confirm actions is critical.
     * @default false
     */
    critical?: boolean;
    /**
     * The BCP47 language code for the locale.
     * @link https://www.ietf.org/rfc/bcp/bcp47.txt
     * @default en-US
     */
    locale?: string;
    /**
     * Object containing all messages to be displayed internally in the modal. They include "title", "ok" and "cancel".
     */
    messages?: {
        /**
         * The title of the modal.
         */
        title?: string;
        /**
         * The text of the confirm button.
         */
        confirm?: string;
        /**
         * The text of the cancel button.
         */
        cancel?: string;
    };
}
type ConfirmationModalProps = ConfirmationModalOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Wraps Content component to support Container Queries
 * @example
 * <Container>
 *  <Content>...</Content>
 * </Container>
 */
declare const Container: react.ForwardRefExoticComponent<ContainerOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface ContainerOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type ContainerProps = ContainerOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Content containers allow merchants to easily scan information to understand its hierarchy and rhythm.
 * @playground
 * @example
 * <Container>
 *  <Content>...</Content>
 * </Container>
 */
declare const Content: react.ForwardRefExoticComponent<ContentOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface ContentOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Decrease the space token in top and bottom padding.
     * @default false
     */
    narrow?: boolean;
}
type ContentProps = ContentOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Popover containers allow merchants to access and interact with more
 * information of an item through an overlay.
 *
 * @example
 *  <PopoverProvider>
 *    <PopoverTrigger>Trigger</PopoverTrigger>
 *    <Popover>Content</Popover>
 *  </PopoverProvider>
 */
declare const Popover: react.ForwardRefExoticComponent<PopoverOptions$1 & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface PopoverOptions$1 extends Pick<PopoverProps$1, 'getAnchorRect'> {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Should activate portal
     * @default true
     */
    portal?: boolean;
}
type PopoverProps = PopoverOptions$1 & ComponentPropsWithoutRef<'div'>;

/**
 * Triggers popover containers
 *
 * @example
 *  <PopoverProvider>
 *    <PopoverTrigger>Trigger</PopoverTrigger>
 *    <Popover>Content</Popover>
 *  </PopoverProvider>
 */
declare const PopoverTrigger: react.ForwardRefExoticComponent<PopoverTriggerOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
interface PopoverTriggerOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type PopoverTriggerProps = PopoverTriggerOptions & ComponentPropsWithoutRef<'button'>;

/**
 * Dismiss the Popover
 * @example
 * <PopoverProvider>
 *  <Popover>
 *    <PopoverDismiss>Dismiss</PopoverDismiss>
 *  </Popover>
 * </PopoverProvider>
 */
declare const PopoverDismiss: react.ForwardRefExoticComponent<PopoverDismissOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
interface PopoverDismissOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type PopoverDismissProps = PopoverDismissOptions & ComponentPropsWithoutRef<'button'>;

/**
 * Contextual Help is represented by a question mark trigger that is positioned next to an element and displays its definition when clicked.
 * @status stable
 * @example
 * <ContextualHelp label="Meaningful label">
 *  Help message
 * </ContextualHelp>
 */
declare const ContextualHelp: react.ForwardRefExoticComponent<ContextualHelpOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type PopoverOptions = Pick<PopoverProviderProps, 'open' | 'setOpen' | 'defaultOpen' | 'store' | 'placement'>;
interface ContextualHelpOptions extends PopoverOptions {
    /**
     * aria-abel for the contextual help trigger
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label
     */
    label: string;
    /**
     * Children prop
     */
    children?: ReactNode;
    /**
     * Controls the padding of the contextual help popover.
     * This prop defines whether it should be narrow or not.
     * It is not narrow by default.
     *
     * @default false
     */
    narrow?: boolean;
}
type ContextualHelpProps = ContextualHelpOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Creates distinction between sections in containers with constrained space or rows in a table.
 * @status stable
 * @example
 * <div>Content <Divider /> Content</div>
 */
declare const Divider: (props: DividerOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHRElement>, HTMLHRElement>, "ref"> & react.RefAttributes<HTMLHRElement>) => JSX.Element | null;
interface DividerOptions {
    /**
     * Divider axis orientation
     * @default 'horizontal'
     */
    orientation?: 'horizontal' | 'vertical';
}
type DividerProps = DividerOptions & ComponentPropsWithoutRef<'hr'>;

/**
 * Drawer's content
 * @example
 * <DrawerProvider>
 *  <DrawerPopover>
 *    <DrawerContent>
 *      The drawer content goes here
 *    <DrawerContent>
 *  </DrawerPopover>
 * </DrawerProvider>
 */
declare const DrawerContent: react.ForwardRefExoticComponent<DrawerContentOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type DrawerContentOptions = Omit<ContentOptions, 'narrow'>;
type DrawerContentProps = DrawerContentOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Icon Buttons represent minor actions in a flow. It includes a label only for accessibility that is not visible, so the icon must be recognizable by itself.
 * @status stable
 * @example
 * <IconButton label="Delete">
 *  <IconTrash />
 * </IconButton>
 */
declare const IconButton: react.ForwardRefExoticComponent<IconButtonOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
interface IconButtonOptions extends ButtonOptions {
    /**
     * Icon button label. Needed for accessibility.
     */
    label: ReactNode;
}
type IconButtonProps = IconButtonOptions & ComponentPropsWithoutRef<'button'>;

/**
 * Drawer's dismiss action
 * @example
 * <DrawerProvider>
 *  <DrawerPopover>
 *    <DrawerHeader>
 *      <DrawerHeading>Heading</DrawerHeading>
 *      <DrawerDismiss />
 *    </DrawerHeader>
 *  </DrawerPopover>
 * </DrawerProvider>
 */
declare const DrawerDismiss: react.ForwardRefExoticComponent<Omit<DrawerDismissProps, "ref"> & react.RefAttributes<HTMLButtonElement>>;
type DrawerDismissOptions = Partial<Pick<IconButtonOptions, 'loading' | 'label'>>;
type DrawerDismissProps = DrawerDismissOptions & ComponentProps<typeof Drawer.Close>;

/**
 * Drawer's footer container
 * @example
 * <DrawerProvider>
 *  <DrawerPopover>
 *    <DrawerFooter>
 *      <Button>...</Button>
 *      <Button>...</Button>
 *    </DrawerFooter>
 *  </DrawerPopover>
 * </DrawerProvider>
 */
declare const DrawerFooter: react.ForwardRefExoticComponent<DrawerFooterOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type DrawerFooterOptions = Omit<ContentOptions, 'narrow' | 'asChild'>;
type DrawerFooterProps = DrawerFooterOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Drawer's header container
 * @example
 * <DrawerProvider>
 *  <DrawerPopover>
 *    <DrawerHeader>
 *      <DrawerHeading>Heading</DrawerHeading>
 *      <DrawerDismiss />
 *    </DrawerHeader>
 *  </DrawerPopover>
 * </DrawerProvider>
 */
declare const DrawerHeader: react.ForwardRefExoticComponent<DrawerHeaderOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type DrawerHeaderOptions = Omit<ContentOptions, 'narrow' | 'asChild'>;
type DrawerHeaderProps = DrawerHeaderOptions & ComponentPropsWithoutRef<'header'>;

/**
 * Heading is used to define levels of typography
 * @example
 * <Heading>Headline text</Heading>
 */
declare const Heading: react.ForwardRefExoticComponent<HeadingOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & react.RefAttributes<HTMLHeadingElement>>;
interface HeadingOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Heading variant
     * @default 'context'
     */
    variant?: 'display1' | 'display2' | 'display3' | 'display4' | 'context';
    /**
     * Heading level
     * @default 3
     */
    level?: 1 | 2 | 3 | 4 | 5 | 6;
}
type HeadingProps = HeadingOptions & ComponentPropsWithoutRef<'h1'>;

/**
 * Drawer's heading
 * @example
 * <DrawerProvider>
 *  <DrawerPopover>
 *    <DrawerHeader>
 *      <DrawerHeading>Heading</DrawerHeading>
 *      <DrawerDismiss />
 *    </DrawerHeader>
 *  </DrawerPopover>
 * </DrawerProvider>
 */
declare const DrawerHeading: react.ForwardRefExoticComponent<DrawerHeadingOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type DrawerHeadingOptions = Omit<HeadingOptions, 'variant'>;
type DrawerHeadingProps = DrawerHeadingOptions & ComponentPropsWithoutRef<'h1'>;

/**
 * Drawer's popover box
 * @example
 * <DrawerProvider>
 *  <DrawerPopover>
 *    <DrawerHeader>
 *      <DrawerHeading>Heading</DrawerHeading>
 *      <DrawerDismiss />
 *    </DrawerHeader>
 *    <DrawerContent>
 *      The content
 *    </DrawerContent>
 *  </DrawerPopover>
 * </DrawerProvider>
 */
declare const DrawerPopover: react.ForwardRefExoticComponent<DrawerPopoverOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface DrawerPopoverOptions {
    /**
     * Popover children
     */
    children: ReactNode;
    /**
     * Popover width
     * @default 'medium'
     */
    size?: 'small' | 'medium';
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type DrawerPopoverProps = DrawerPopoverOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Drawer's state provider
 */
declare function DrawerProvider(props: DrawerProviderProps): react_jsx_runtime.JSX.Element;
interface DrawerProviderOptions {
    /**
     * Provider Children
     */
    children: ReactNode;
    /**
     * Wether the Drawer is open
     */
    open?: boolean;
    /**
     * Dispatched on close the Drawer
     */
    onClose?: () => void;
    /**
     * Distached on change the value of open
     */
    onOpenChange?: (open: boolean) => void;
    /**
     * When false dragging, clicking outside, pressing esc, etc. will not close the drawer.
     * Use this in comination with the open prop, otherwise you won't be able to open/close the drawer.
     */
    dismissible?: boolean;
}
type DrawerProviderProps = DrawerProviderOptions;

/**
 * Drawer's Trigger
 * @example
 * <DrawerProvider>
 *  <DrawerTrigger asChild>
 *    <Button>Open</Button>
 *  </DrawerTrigger>
 * </DrawerProvider>
 */
declare const DrawerTrigger: typeof Drawer.Trigger;
type DrawerTriggerOptions = Pick<ButtonOptions, 'asChild' | 'children'>;
type DrawerTriggerProps = DrawerTriggerOptions & ComponentProps<typeof Drawer.Trigger>;

/**
 * An Empty State represents the state of a container, such as when there are no items to display or when the user isn't allowed to access items.
 * @status stable
 * @example
 * <EmptyState>
 *  <Heading>Title goes here</Heading>
 *  <EmptyStateActions>
 *    <Button variant="primary">label</Button>
 *  </EmptyStateActions>
 * </EmptyState>
 * */
declare const EmptyState: react.ForwardRefExoticComponent<EmptyStateOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface EmptyStateOptions {
    /**
     * Indicates size of empty state area
     * @default 'medium'
     */
    size?: 'small' | 'medium' | 'large';
}
type EmptyStateProps = EmptyStateOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Empty actions section
 * @status stable
 */
declare const EmptyStateActions: (props: EmptyStateActionsOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>) => JSX.Element | null;
interface EmptyStateActionsOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type EmptyStateActionsProps = EmptyStateActionsOptions & ComponentPropsWithoutRef<'div'>;

/**
 * EmptyState illustration section
 * @status stable
 */
declare const EmptyStateIllustration: (props: EmptyStateIllustrationOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>) => JSX.Element | null;
interface EmptyStateIllustrationOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type EmptyStateIllustrationProps = EmptyStateIllustrationOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Implementation of a fieldset
 * @example
 * <Field>
 *  <Label>Label</Label>
 *  <Input />
 *  <FieldDescription>Short description</FieldDescription>
 *  <FieldError>Error message</FieldError>
 * </Field>
 */
declare const Field: (props: FieldOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>) => JSX.Element | null;
interface FieldOptions {
    /**
     * Enables component composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Whether the field is in an error state
     * @default false
     */
    error?: boolean;
    /**
     * Space between the field's children
     * @default 'normal'
     */
    space?: 'normal' | 'large';
}
type FieldProps = FieldOptions & react.ComponentPropsWithoutRef<'div'>;

declare const FieldContext: react.Context<Store<FieldContextType, (cb: FieldContextType) => FieldContextType>>;
declare function useFieldContext(): Store<FieldContextType, (cb: FieldContextType) => FieldContextType>;
interface FieldContextType {
    id: string;
    error: boolean;
}

/**
 * Field provider
 */
declare function FieldProvider(props: FieldProviderProps): react_jsx_runtime.JSX.Element;
interface FieldProviderOptions {
    /**
     * Field store
     */
    store: Store<FieldContextType>;
    /**
     * Children to be rendered within the provider
     */
    children?: react__default.ReactNode;
}
type FieldProviderProps = FieldProviderOptions;

/**
 * Description of a Field
 */
declare const FieldDescription: react.ForwardRefExoticComponent<FieldDescriptionOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface FieldDescriptionOptions {
    /**
     * Enables component composition
     * @default false
     */
    asChild?: boolean;
}
type FieldDescriptionProps = FieldDescriptionOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Error of a field
 */
declare const FieldError: react.ForwardRefExoticComponent<FieldErrorOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface FieldErrorOptions {
    /**
     * Enables component composition
     * @default false
     */
    asChild?: boolean;
}
type FieldErrorProps = FieldErrorOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Count chars of a field that contains a input or textarea that has a max-length
 */
declare const FieldCharCounter: react.ForwardRefExoticComponent<FieldCharCounterOptions & Omit<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">, "children"> & react.RefAttributes<HTMLDivElement>>;
interface FieldCharCounterOptions {
    /**
     * Current count
     */
    count: number;
    /**
     * Max count
     */
    limit: number;
}
type FieldCharCounterProps = FieldCharCounterOptions & Omit<ComponentPropsWithoutRef<'div'>, 'children'>;

/**
 * Filter popover box
 * @example
 * <FilterProvider>
 *  <FilterPopover>
 *   ...
 *  </FilterPopover>
 * </FilterProvider>
 */
declare const FilterPopover: react.ForwardRefExoticComponent<FilterPopoverOptions & PopoverOptions$1 & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface FilterPopoverOptions extends PopoverOptions$1 {
    /**
     * Filter messages
     */
    messages?: {
        /**
         * Apply button text message
         */
        apply: string;
        /**
         * Clear button text message
         */
        clear: string;
    };
}
type FilterPopoverProps = FilterPopoverOptions & PopoverProps;

/**
 * Provides context to Filter
 * @example
 * <FilterProvider>
 *   <FilterTrigger>...</FilterTrigger>
 *   <FilterPopover>...</FilterPopover>
 * </FilterProvider>
 */
declare function FilterProvider(props: FilterProviderProps): react_jsx_runtime.JSX.Element;
interface FilterProviderOptions {
    /**
     * Children of FilterProvider
     */
    children: ReactNode;
    /**
     * Whether the filter is open
     */
    open?: boolean;
    /**
     * Callback to set the filter open state
     */
    setOpen?: react__default.Dispatch<react__default.SetStateAction<boolean>>;
    /**
     * Whether the filter is open by default
     */
    defaultOpen?: boolean;
    /**
     * Whether the filter is searchable
     */
    searchValue?: string;
    /**
     * Callback to set the filter search value
     */
    setSearchValue?: react__default.Dispatch<react__default.SetStateAction<string>>;
    /**
     * Whether the filter is searchable by default
     */
    defaultSearchValue?: string;
    /**
     * Filter value
     */
    value?: string | string[];
    /**
     * Callback to set the filter value
     */
    setValue?: react__default.Dispatch<react__default.SetStateAction<string>> | react__default.Dispatch<react__default.SetStateAction<string[]>>;
    /**
     * Filter default value
     */
    defaultValue?: string | string[];
}
type FilterProviderProps = FilterProviderOptions;

/**
 * Triggers the Filter Popover box, also displays the Filter applied value
 * @example
 * <FilterProvider>
 *   <FilterTrigger>Open</FilterTrigger>
 * </FilterProvider>
 */
declare const FilterTrigger: react.ForwardRefExoticComponent<PopoverTriggerOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
type FilterTriggerProps = PopoverTriggerProps;

/**
 * Filters represent criteria that users can choose to narrow down a Collection. They can include single or multiple selection.
 * @status stable
 * @example
 * <Filter label="Label">
 *  <FilterItem value="option">Option</FilterItem>
 * </Filter>
 */
declare const Filter: react.ForwardRefExoticComponent<FilterOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type InheritedOptions$2 = Pick<FilterProviderProps, 'value' | 'setValue' | 'defaultValue' | 'searchValue' | 'setSearchValue' | 'defaultSearchValue'> & Pick<FilterPopoverProps, 'messages'> & Pick<FilterTriggerProps, 'disabled'>;
interface FilterOptions extends InheritedOptions$2 {
    /**
     * Filter label
     */
    label: string;
}
type FilterProps = FilterOptions & ComponentPropsWithoutRef<'div'>;

declare const FilterContext: react.Context<SelectStore<any> | undefined>;
/**
 * Recovers the filter store
 * @example
 * const filter = useFilterContext()
 */
declare function useFilterContext(): SelectStore<any> | undefined;

/**
 * Action that applies the Filter value, and closes the popover
 * @example
 * <FilterApply>Apply</FilterApply>
 */
declare const FilterApply: react.ForwardRefExoticComponent<PopoverDismissOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
type FilterApplyProps = PopoverDismissProps;

/**
 * Action that clears both Filter value and UI Select value
 * @example
 * <FilterClear>Clear</FilterClear>
 */
declare const FilterClear: react.ForwardRefExoticComponent<PopoverDismissOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
type FilterClearProps = PopoverDismissProps;

type SelectProviderOptions = SelectProviderProps;

/**
 * Select opens a dropdown with between five and seven values for users to choose one. Use Radios for less items or a Combobox for more items.
 * @status stable
 * @example
 * <Select>
 *   <SelectItem value="item-1">Item 1</SelectItem>
 *   <SelectItem value="item-2">Item 2</SelectItem>
 *   <SelectItem value="item-3">Item 3</SelectItem>
 * </Select>
 */
declare const Select: react.ForwardRefExoticComponent<SelectOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
interface SelectOptions extends SelectProviderOptions {
    /**
     * Whether is in error state
     */
    error?: boolean;
    /**
     * Whether is disabled
     * @default false
     */
    disabled?: boolean;
    /**
     * Select messages
     */
    messages?: {
        placeholder: string;
    };
}
type SelectProps = SelectOptions & ComponentPropsWithoutRef<'button'>;

/**
 * Option of the Select
 */
declare const SelectItem: react.ForwardRefExoticComponent<SelectItemOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface SelectItemOptions {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Option value
     */
    value?: string;
    /**
     * Whether to hide the select when this item is clicked. By default, it's true when the value prop is also provided.
     * @default true
     */
    hideOnClick?: boolean;
}
type SelectItemProps = SelectItemOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Check indicator of the SelectItem
 */
declare const SelectItemCheck: react.ForwardRefExoticComponent<SelectItemCheckOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & react.RefAttributes<HTMLSpanElement>>;
interface SelectItemCheckOptions {
    /**
     * Indicator icon override
     */
    children?: ReactNode;
}
type SelectItemCheckProps = SelectItemCheckOptions & ComponentPropsWithoutRef<'span'>;

/**
 * List that wraps the SelectItems
 */
declare const SelectList: react.ForwardRefExoticComponent<SelectListOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface SelectListOptions {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
    /**
     *
     * @default false
     */
    alwaysVisible?: boolean;
}
type SelectListProps = SelectListOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Popover box of Select
 */
declare const SelectPopover: react.ForwardRefExoticComponent<SelectPopoverOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface SelectPopoverOptions extends SelectPopoverOptions$1 {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
}
type SelectPopoverProps = SelectPopoverOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Trigger of the PopoverBox
 */
declare const SelectTrigger: react.ForwardRefExoticComponent<SelectTriggerOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
interface SelectTriggerOptions {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
}
type SelectTriggerProps = SelectTriggerOptions & ComponentPropsWithoutRef<'button'>;

/**
 * Filter listbox
 * @example
 * <FilterProvider>
 *  <FilterPopover>
 *    <FilterList>
 *      <FilterItem value="option">Option</FilterItem>
 *    </FilterList>
 *  </FilterPopover>
 * </FilterProvider>
 */
declare const FilterList: react.ForwardRefExoticComponent<FilterListProps & react.RefAttributes<HTMLDivElement>>;
type FilterListProps = Omit<SelectListProps, 'alwaysVisible'>;

/**
 * Spaces elements consistently
 * @example
 * <Stack>
 *  <div>Stacked 1</div>
 *  <div>Stacked 2</div>
 * </Stack>
 */
declare const Stack: react.ForwardRefExoticComponent<StackOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface StackOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Switches the layout to horizontal
     * @default false
     */
    horizontal?: boolean;
    /**
     * Grows the width of items to match the parent
     * @default false
     */
    fluid?: boolean;
    /**
     * space between items
     * @default 0
     */
    space?: string;
    /**
     * items alignment
     * @default start
     */
    align?: 'start' | 'end';
}
type StackProps = StackOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Filter listbox
 * @example
 * <FilterProvider>
 *  <FilterPopover>
 *    <FilterList>
 *      <FilterItem value="option">Option</FilterItem>
 *    </FilterList>
 *  </FilterPopover>
 * </FilterProvider>
 */
declare const FilterListSkeleton: react.ForwardRefExoticComponent<StackOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type FilterListSkeletonProps = StackOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Filter Option
 * @example
 * <Filter label="Label">
 *  <FilterItem value="option">Option</FilterItem>
 * </Filter>
 */
declare const FilterItem: react.ForwardRefExoticComponent<FilterItemProps & react.RefAttributes<HTMLDivElement>>;
type FilterItemProps = Omit<SelectItemProps, 'hideOnClick'>;

/**
 * Check state of the FilterItem
 */
declare const FilterItemCheck: react.ForwardRefExoticComponent<SelectItemCheckOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type FilterItemCheckProps = SelectItemCheckProps;

/**
 * Renders the Filter applied value
 */
declare const FilterValue: react.ForwardRefExoticComponent<FilterValueOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & react.RefAttributes<HTMLSpanElement>>;
interface FilterValueOptions {
    /**
     * Custom styles
     */
    className?: string;
}
type FilterValueProps = FilterValueOptions & ComponentPropsWithoutRef<'span'>;

/**
 * Grid layout
 * @see https://developer.mozilla.org/en-US/docs/Glossary/Grid
 * @example
 * <Grid columns="repeat(3, 1fr)">
 *  <div>Item 1</div>
 *  <div>Item 2</div>
 *  <div>Item 3</div>
 *  <div>Item 4</div>
 * </Grid>
 */
declare const Grid: react.ForwardRefExoticComponent<GridOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface GridOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * CSS Gap
     * @default '$space-gap'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/gap
     */
    gap?: CSSProperty.GridGap;
    /**
     * CSS grid-template-areas
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas
     */
    areas?: CSSProperty.GridTemplateAreas;
    /**
     * CSS grid-template-rows
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows
     */
    rows?: CSSProperty.GridTemplateRows;
    /**
     * CSS grid-template-columns
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns
     */
    columns?: CSSProperty.GridTemplateColumns;
    /**
     * CSS grid-auto-columns
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns
     */
    autoColumns?: CSSProperty.GridAutoColumns;
    /**
     * CSS grid-auto-rows
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows
     */
    autoRows?: CSSProperty.GridAutoRows;
    /**
     * CSS grid-auto-flow
     * @default 'row'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow
     */
    autoFlow?: CSSProperty.GridAutoFlow;
}
type GridProps = GridOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Optional cell of a grid layout
 * @see https://developer.mozilla.org/en-US/docs/Glossary/Grid
 * @example
 * <Grid columns="repeat(3, 1fr)">
 *  <GridCell>Item 1</GridCell>
 *  <GridCell>Item 2</GridCell>
 *  <GridCell>Item 3</GridCell>
 *  <GridCell>Item 4</GridCell>
 * </Grid>
 */
declare const GridCell: react.ForwardRefExoticComponent<GridCellOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface GridCellOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * CSS grid-column-start
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start
     */
    columnStart?: CSSProperty.GridColumnStart;
    /**
     * CSS grid-column-end
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end
     */
    columnEnd?: CSSProperty.GridColumnEnd;
    /**
     * CSS grid-row-start
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start
     */
    rowStart?: CSSProperty.GridRowStart;
    /**
     * CSS grid-row-end
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end
     */
    rowEnd?: CSSProperty.GridRowEnd;
    /**
     * CSS grid-column
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column
     */
    column?: CSSProperty.GridColumn;
    /**
     * CSS grid-row
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row
     */
    row?: CSSProperty.GridRow;
    /**
     * CSS grid-area
     * @default 'auto'
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area
     */
    area?: CSSProperty.GridArea;
}
type GridCellProps = GridCellOptions & ComponentPropsWithoutRef<'div'>;

/**
 * An Input is a field for short text values. It can include masks and character restrictions, such as accepting only numbers.
 * @status stable
 * @example
 * <Input />
 */
declare const Input: react__default.ForwardRefExoticComponent<Omit<InputProps, "ref"> & react__default.RefAttributes<HTMLInputElement>>;
interface InputOptions {
    /**
     * Whether there is an error
     * @default false
     */
    error?: boolean;
    /**
     * Whether is disabled or not
     * @default false
     */
    disabled?: boolean;
    /**
     * Node added before input space
     */
    prefix?: react__default.ReactNode;
    /**
     * Node added before input space
     */
    suffix?: react__default.ReactNode;
    /**
     * Callback for value change
     */
    onChange?: react__default.Dispatch<react__default.SetStateAction<any>>;
}
type InputProps = InputOptions & Omit<ComponentProps<'input'>, 'prefix' | 'onChange'>;

/**
 * Label component
 * @example
 * <Label>Label</Label>
 */
declare const Label$1: react.ForwardRefExoticComponent<LabelOptions & Omit<react.DetailedHTMLProps<react.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, "ref"> & react.RefAttributes<HTMLLabelElement>>;
interface LabelOptions {
    /**
     * Enables component composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Whether the input linked to this label is optional
     * @default false
     */
    optional?: boolean;
}
type LabelProps = LabelOptions & ComponentPropsWithoutRef<'label'>;

/**
 * Links represent navigation inside a page or between pages, including to pages outside the Admin. They exist within or directly after a text.
 * @status stable
 * @example
 * <Link href="https://vtex.com">Go to VTEX</Link>
 */
declare const Link: react.ForwardRefExoticComponent<LinkOptions & Omit<react.DetailedHTMLProps<react.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref"> & react.RefAttributes<HTMLAnchorElement>>;
interface LinkOptions {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
}
type LinkProps = LinkOptions & ComponentPropsWithoutRef<'a'>;

/**
 * Menu state provider
 */
declare function MenuProvider(props: MenuProviderProps): react_jsx_runtime.JSX.Element;
type MenuProviderProps = MenuProviderProps$1;
type MenuProviderOptions = MenuProviderProps;

/**
 * Menus summarize actions in a dropdown. They can include actions that are rarely used, complementary, or repeated for each item in a Collection.
 * @status stable
 * @example
 * <Menu label="Open">
 *  <MenuItem>Item 1</MenuItem>
 * </Menu>
 */
declare const Menu: react.ForwardRefExoticComponent<MenuOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type InheritedOptions$1 = Pick<ButtonProps, 'size' | 'disabled'> & Pick<MenuProviderOptions, 'open' | 'setOpen' | 'defaultOpen' | 'store' | 'placement'>;
interface MenuOptions extends InheritedOptions$1 {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Trigger label
     */
    label: ReactNode;
    /**
     * Type of dropdown
     * @default 'menu'
     */
    type?: 'menu' | 'actions';
    /**
     * Hide the textual label
     * @default false
     */
    iconOnly?: boolean;
    /**
     * Change between color combinations.
     * @default 'tertiary'
     */
    variant?: 'primary' | 'secondary' | 'tertiary';
}
type MenuProps = MenuOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Menu's Popover Box
 * @example
 */
declare const MenuPopover: react.ForwardRefExoticComponent<MenuPopoverOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface MenuPopoverOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Should activate portal
     * @default true
     */
    portal?: boolean;
}
type MenuPopoverProps = MenuPopoverOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Option within a menu popover box
 */
declare const MenuItem: react.ForwardRefExoticComponent<MenuItemOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface MenuItemOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Wether is critical
     * @default false
     */
    critical?: boolean;
    /**
     * Wether is disabled
     * @default false
     */
    disabled?: boolean;
}
type MenuItemProps = MenuItemOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Separator of MenuItems
 */
declare const MenuSeparator: react.ForwardRefExoticComponent<DividerOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHRElement>, HTMLHRElement>, "ref"> & react.RefAttributes<HTMLHRElement>>;
type MenuSeparatorProps = DividerProps;

/**
 * Menu's trigger action
 */
declare const MenuTrigger: react.ForwardRefExoticComponent<MenuTriggerOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
interface MenuTriggerOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}

/**
 * Modal displays content related to a minor job within a page's main job. It demands complete attention and blocks interactions outside the overlay.
 * @status stable
 * @example
 * ```jsx
 * function Example() {
 *  const [open, setOpen] = React.useState(false)
 *
 *  return (
 *    <>
 *      <Button onClick={() => setOpen(true)}>Open modal</Button>
 *      <Modal
 *        open={open}
 *        onClose={() => {
 *          setOpen(false)
 *        }}
 *      >
 *        <ModalContent>Content</ModalContent>
 *      </Modal>
 *    </>
 *  )
 * }
 * ```
 */
declare const Modal: react.ForwardRefExoticComponent<ModalOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface ModalOptions {
    /**
     * Callback fired when the backdrop or close button is clicked.
     */
    onClose?: (event: Event) => void;
    /**
     * Whether the modal is open or not
     * @default false
     */
    open?: boolean;
    /**
     * Whether to render the modal inside a portal or not
     * @default true
     */
    portal?: boolean;
    /**
     * Modal size
     * @default medium
     */
    size?: 'small' | 'medium' | 'large';
}
type ModalProps = ModalOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Header of the Modal
 * @example
 * ```jsx
 * function Example() {
 *  const [open, setOpen] = React.useState(false)
 *
 *  return (
 *    <>
 *      <Button onClick={() => setOpen(true)}>Open modal</Button>
 *      <Modal
 *        open={open}
 *        onClose={() => {
 *          setOpen(false)
 *        }}
 *      >
 *        <ModalHeader>
 *          <ModalHeading>Title</ModalHeading>
 *        </ModalHeader>
 *      </Modal>
 *    </>
 *  )
 * }
 * ```
 */
declare const ModalHeader: react.ForwardRefExoticComponent<ModalHeaderOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type ModalHeaderOptions = Omit<ContentOptions, 'narrow'>;
type ModalHeaderProps = ModalHeaderOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Content of the Modal
 * @example
 * ```jsx
 * function Example() {
 *  const [open, setOpen] = React.useState(false)
 *
 *  return (
 *    <>
 *      <Button onClick={() => setOpen(true)}>Open modal</Button>
 *      <Modal
 *        open={open}
 *        onClose={() => {
 *          setOpen(false)
 *        }}
 *      >
 *        <ModalContent>Content</ModalContent>
 *      </Modal>
 *    </>
 *  )
 * }
 * ```
 */
declare const ModalContent: react.ForwardRefExoticComponent<ContentOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type ModalContentOptions = ContentOptions;
type ModalContentProps = ModalContentOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Footer of the Modal
 * @example
 * ```jsx
 * function Example() {
 *  const [open, setOpen] = React.useState(false)
 *
 *  return (
 *    <>
 *      <Button onClick={() => setOpen(true)}>Open modal</Button>
 *      <Modal
 *        open={open}
 *        onClose={() => {
 *          setOpen(false)
 *        }}
 *      >
 *        <ModalFooter>
 *          <Button>Ok</Button>
 *        </ModalFooter>
 *      </Modal>
 *    </>
 *  )
 * }
 * ```
 */
declare const ModalFooter: react.ForwardRefExoticComponent<ModalFooterOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type ModalFooterOptions = Omit<ContentOptions, 'narrow'>;
type ModalFooterProps = ModalFooterOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Header of the Modal
 * @example
 * ```jsx
 * function Example() {
 *  const [open, setOpen] = React.useState(false)
 *
 *  return (
 *    <>
 *      <Button onClick={() => setOpen(true)}>Open modal</Button>
 *      <Modal
 *        open={open}
 *        onClose={() => {
 *          setOpen(false)
 *        }}
 *      >
 *        <ModalHeader>
 *          <ModalHeading>Heading</ModalHeading>
 *          <ModalDismiss />
 *        </ModalHeader>
 *      </Modal>
 *    </>
 *  )
 * }
 * ```
 */
declare const ModalHeading: react.ForwardRefExoticComponent<ModalHeadingOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & react.RefAttributes<HTMLHeadingElement>>;
type ModalHeadingOptions = Pick<HeadingProps, 'variant'>;
type ModalHeadingProps = ModalHeadingOptions & ComponentPropsWithoutRef<'h1'>;

/**
 * Header of the Modal
 * @example
 * ```jsx
 * function Example() {
 *  const [open, setOpen] = React.useState(false)
 *
 *  return (
 *    <>
 *      <Button onClick={() => setOpen(true)}>Open modal</Button>
 *      <Modal
 *        open={open}
 *        onClose={() => {
 *          setOpen(false)
 *        }}
 *      >
 *        <ModalHeader>
 *          <ModalHeading>Title</ModalHeading>
 *          <ModalDismiss />
 *        </ModalHeader>
 *      </Modal>
 *    </>
 *  )
 * }
 * ```
 */
declare const ModalDismiss: react.ForwardRefExoticComponent<ModalDismissOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
type ModalDismissOptions = Pick<IconButtonOptions, 'size'>;
type ModalDismissProps = ModalDismissOptions & ComponentPropsWithoutRef<'button'>;

/**
 * The Page structure helps users to easily identify where they are, view content essential to the main job, and perform related actions.
 * @status stable
 * @example
 * <Page>
 *  <PageHeader>
 *    <PageHeading>Title</PageHeading>
 *  </PageHeader>
 *  <PageContent>Content</PageContent>
 * <Page>
 */
declare const Page: react.ForwardRefExoticComponent<ContainerOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type PageProps = ContainerOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Header of the page
 *
 * @example
 * <Page>
 *  <PageHeader>
 *    <PageHeading>Title</PageHeading>
 *  </PageHeader>
 * </Page>
 */
declare const PageHeader: react.ForwardRefExoticComponent<PageHeaderOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type PageHeaderOptions = Omit<ContentOptions, 'narrow'>;
type PageHeaderProps = PageHeaderOptions & ComponentPropsWithoutRef<'header'>;

/**
 * Content of a page
 * @example
 * <Page>
 *  <PageContent>Content</PageContent>
 * </Page>
 */
declare const PageContent: react.ForwardRefExoticComponent<PageContentOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface PageContentOptions {
    /**
     * Layout type
     * @default 'standard'
     */
    layout?: 'wide' | 'standard' | 'narrow';
}
type PageContentProps = PageContentOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Title of a page
 *
 * @example
 * <Page>
 *  <PageHeader>
 *    <PageHeading>Title</PageHeading>
 *  </PageHeader>
 * </Page>
 */
declare const PageHeading: react.ForwardRefExoticComponent<HeadingOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & react.RefAttributes<HTMLHeadingElement>>;

/**
 * Row of the page header
 * @status stable
 * @example
 * <Page>
 *  <PageHeader>
 *    <PageHeaderRow>
 *      <PageHeading>Title</PageHeading>
 *    </PageHeaderRow>
 *    <PageHeaderRow>
 *      {tabs}
 *    </PageHeaderRow>
 *  </PageHeader>
 * </Page>
 */
declare const PageHeaderRow: (props: PageHeaderRowOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>) => JSX.Element | null;
interface PageHeaderRowOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type PageHeaderRowProps = PageHeaderRowOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Pagination handles navigation inside a Collection. It displays the number of items, filtered or not, and allow users to navigate between pages.
 * @status stable
 * @example
 * <Pagination
 *   page={page}
 *   onPageChange={(page, type) => {}}
 *   total={total}
 * />
 */
declare const Pagination: react.ForwardRefExoticComponent<PaginationOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface PaginationOptions {
    /**
     * Function called whenever the pagination actions are triggered and the page changes.
     * @param page The new page number reference
     * @param type The type of the action that was triggered
     */
    onPageChange?: (page: number, type: 'next' | 'prev') => void;
    /**
     * Pagination current page
     */
    page: number;
    /**
     * The total number of items
     */
    total: number;
    /**
     * Whether the pagination is loading or not.
     * @default false
     */
    loading?: boolean;
    /**
     * Page size
     * @default 25
     */
    size?: number;
}
type PaginationProps = PaginationOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Radio inputs allow users to select one option from a list. It should be used inside a RadioGroup component.
 * @status stable
 * @example
 * <RadioGroup label="Radio group">
 *  <Radio value="1">Option 1</Radio>
 *  <Radio value="2">Option 2</Radio>
 *  <Radio value="3">Option 3</Radio>
 * </RadioGroup>
 */
declare const Radio: react.ForwardRefExoticComponent<RadioOptions & Omit<react.DetailedHTMLProps<react.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & react.RefAttributes<HTMLInputElement>>;
interface RadioOptions {
    /**
     * Wether is disabled
     * @default false
     */
    error?: boolean;
    /**
     * The value of the radio
     */
    value: string;
}
type RadioProps = RadioOptions & ComponentPropsWithoutRef<'input'>;

/**
 * A group of Radios includes five options at most and only one can be selected at a time. Options can be listed horizontally or vertically.
 * @status stable
 * @example
 * <RadioGroup label="Radio group">
 *  <Radio value="1">Option 1</Radio>
 *  <Radio value="2">Option 2</Radio>
 *  <Radio value="3">Option 3</Radio>
 * </RadioGroup>
 */
declare const RadioGroup: react.ForwardRefExoticComponent<RadioGroupOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLInputElement>>;
interface RadioGroupState {
    /**
     * The value of the active radio
     */
    value?: string | number | null;
    /**
     * The callback to set the active radio
     */
    setValue?: ((value: string | number | null) => void) | undefined;
    /**
     * The id of the active radio group item
     */
    activeId?: string | null;
    /**
     * Default active id of the radio group
     */
    defaultActiveId?: string | null;
    /**
     * Default value of the radio group
     */
    defaultValue?: string | number | null;
}
interface RadioGroupOptions {
    /**
     * Whether the radio group is in an error state
     */
    error?: boolean;
    /**
     * Radio group description
     */
    description?: string;
    /**
     * Radio group error message
     */
    errorText?: string;
    /**
     * Radio group label
     */
    label: ReactNode;
    /**
     * Whether the radio group is horizontal or vertical
     * @default false
     */
    horizontal?: boolean;
    /**
     * Radio group state
     */
    state?: RadioStore;
}
type RadioGroupProps = RadioGroupOptions & ComponentPropsWithoutRef<'div'>;
declare const useRadioState: (props?: RadioGroupState) => RadioStore;

/**
 * Search is a text input that users can type to narrow down a Collection. Use Filters if values can be classified in predefined options.
 * @status stable
 * @example
 * <Search />
 */
declare const Search: react.ForwardRefExoticComponent<SearchOptions & Omit<Omit<react.DetailedHTMLProps<react.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref">, "placeholder"> & react.RefAttributes<HTMLInputElement>>;
interface SearchOptions {
    /**
     * Whether component is loading or not
     * @default false
     */
    loading?: boolean;
    /**
     * Callback when the input is cleared
     * @default undefined
     */
    onClear?: () => void;
    /**
     * Object containing all messages to be displayed in the search input
     */
    messages?: {
        /**
         * Input placeholder text.
         */
        placeholder?: string;
    };
    /**
     * @deprecated
     * You must use the messages property to override the placeholder label.
     */
    placeholder?: string;
}
type SearchProps = SearchOptions & Omit<ComponentPropsWithoutRef<'input'>, 'placeholder'>;

/**
 * Skeletons compose a low-fidelity representation of content that will load. They appear when the entire page is loading and take up to 5s.
 * @status stable
 * @example
 * <Skeleton shape="circle" style={{ width: 200, height: 200 }} />
 */
declare const Skeleton: react.ForwardRefExoticComponent<SkeletonOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface SkeletonOptions {
    /**
     * Skeleton shape
     * @default rect
     */
    shape?: 'circle' | 'rect';
    /**
     * CSS width
     * @default '100%'
     */
    width?: CSSProperty.Width;
    /**
     * CSS height
     * @default '100%'
     */
    height?: CSSProperty.Height;
}
type SkeletonProps = SkeletonOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Spinner informs that a specific element in the page is loading or a task is in progress. Use only for request that take over 1s and less than 5s.
 * @status stable
 * @example
 * <Spinner description="loading" size={16} />
 */
declare const Spinner: react.ForwardRefExoticComponent<SpinnerOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface SpinnerOptions {
    /**
     * Specify a description that would be used to best describe the loading state
     * @default 'loading'
     */
    description?: string;
    /**
     * Increase or decrease the size of the shape
     * @default 16
     */
    size?: number;
}
type SpinnerProps = SpinnerOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Tabs are used to create up to five views inside a page. Use for related content that is not comparable, when a unified view is not necessary.
 * @status stable
 * @example
 * <TabProvider>
 *  <TabList>
 *    <Tab>Tab 1</Tab>
 *    <Tab>Tab 2</Tab>
 *  </TabList>
 *  <TabPanel>
 *    Tab 1
 *  </TabPanel>
 *  <TabPanel>
 *    Tab 2
 *  </TabPanel>
 * </TabProvider>
 */
declare const Tab: react.ForwardRefExoticComponent<TabOptions & Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
interface TabOptions {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
}
type TabProps = TabOptions & ComponentPropsWithoutRef<'button'>;

/**
 * Tabs are used to create up to five views inside a page. Use for related content that is not comparable, when a unified view is not necessary.
 * @status stable
 * @example
 * <TabProvider>
 *  <TabList>
 *    <Tab>Tab 1</Tab>
 *    <Tab>Tab 2</Tab>
 *  </TabList>
 *  <TabPanel>
 *    Tab 1
 *  </TabPanel>
 *  <TabPanel>
 *    Tab 2
 *  </TabPanel>
 * </TabProvider>
 */
declare const TabList: react.ForwardRefExoticComponent<TabListOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TabListOptions {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
}
type TabListProps = TabListOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Tabs are used to create up to five views inside a page. Use for related content that is not comparable, when a unified view is not necessary.
 * @status stable
 * @example
 * <TabProvider>
 *  <TabList>
 *    <Tab>Tab 1</Tab>
 *    <Tab>Tab 2</Tab>
 *  </TabList>
 *  <TabPanel>
 *    Tab 1
 *  </TabPanel>
 *  <TabPanel>
 *    Tab 2
 *  </TabPanel>
 * </TabProvider>
 */
declare const TabPanel: react.ForwardRefExoticComponent<TabPanelOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TabPanelOptions {
    /**
     * Enable children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * The id of the tab that controls this panel. By default, this value will be inferred based on the order of the tabs and the panels.
     */
    tabId?: string;
}
type TabPanelProps = TabPanelOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Body of the table
 */
declare const TableBody: react.ForwardRefExoticComponent<TableBodyOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TableBodyOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type TableBodyProps = TableBodyOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Cell of the table body
 */
declare const TableCell: react.ForwardRefExoticComponent<TableCellOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TableCellOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Cell content alignment
     * @default 'start'
     */
    align?: 'start' | 'end';
}
type TableCellProps = TableCellOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Cell of the table header
 */
declare const TableHeaderCell: react.ForwardRefExoticComponent<TableHeaderCellOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TableHeaderCellOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Represents a sortable column
     * @default false
     */
    sortable?: boolean;
    /**
     * Cell content alignment
     * @default 'start'
     */
    align?: 'start' | 'end';
}
type TableHeaderCellProps = TableHeaderCellOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Header of the table
 */
declare const TableHeader: react.ForwardRefExoticComponent<TableHeaderOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TableHeaderOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type TableHeaderProps = TableHeaderOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Component that indicates if a column is sortable and its current sort direction
 * @example
 * <TableHeaderCell>
      {title}
      <TableSortIndicator sorted={sortDirection} />
    </TableHeaderCell>
 */
declare const TableSortIndicator: react.ForwardRefExoticComponent<TableSortIndicatorOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TableSortIndicatorOptions {
    /**
     * Indicates if column is currently sorted, and in witch order
     * @default null
     */
    sorted?: 'asc' | 'desc' | null;
}
type TableSortIndicatorProps = TableSortIndicatorOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Row of the table
 */
declare const TableRow: react.ForwardRefExoticComponent<TableRowOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TableRowOptions {
    /**
     * Indicates the row selection
     * @default false
     */
    selected?: boolean;
    /**
     * Indicates the row expansion
     * @default false
     */
    expanded?: boolean;
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Indicates that the row dims while hovered
     * @default true
     */
    dimOnHover?: boolean;
}
type TableRowProps = TableRowOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Table lists items vertically and can include actions for each row. The columns display property values for users to scan, sort, and compare.
 * @status stable
 */
declare const Table: react.ForwardRefExoticComponent<TableOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TableOptions {
    /**
     * Array of column widths
     *
     * When using the Table component
     * @default []
     *
     * When using the SimpleTable component
     * @default [repeat(${columns.length}, var(--sl-table-default-column-width))]
     */
    columnWidths?: string[];
    /**
     * If true, the Table component will be rendered as a child of the Compose component
     * @default false
     */
    asChild?: boolean;
    /**
     * If true, the header will be sticky
     * @default false
     */
    stickyHeader?: boolean;
    /**
     * If true, the first column will be sticky
     * @default false
     */
    stickyColumn?: boolean;
    /**
     * The density of the table
     * @default 'default'
     */
    density?: 'default' | 'comfortable' | 'compact';
}
type TableProps = TableOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Tags differentiate items through a read-only text value in a colored bg. They can be secondary or primary, given their relevance to the main job.
 * @status stable
 * @example
 * <Tag>Short text</Tag>
 */
declare const Tag: react.ForwardRefExoticComponent<TagOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TagOptions {
    /**
     * Tag variant
     * @default 'primary'
     */
    variant?: 'primary' | 'secondary';
    /**
     * Tag color
     * @default 'gray'
     */
    color?: 'gray' | 'red' | 'teal' | 'purple' | 'pink' | 'green' | 'cyan' | 'blue' | 'orange' | 'yellow';
    /**
     * Tag size
     * @default 'normal'
     */
    size?: 'normal' | 'large';
}
type TagProps = TagOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Text component
 * @example
 * <Text variant="context" color="#000000">Hello world</Text>
 */
declare const Text: react.ForwardRefExoticComponent<TextProps & react.RefAttributes<unknown>>;
interface TextOptions {
    /**
     * Text color
     * @default inherit
     */
    color?: string;
    /**
     * Text variant
     *
     * The "context" variant simulates the default behavior of a span,
     * where the font settings when not specified are the same as the parent element.
     * @default 'context'
     */
    variant?: 'context' | 'body' | 'action' | 'emphasis' | 'caption1' | 'caption2' | 'display1' | 'display2' | 'display3' | 'display4';
}
interface Label extends TextOptions, ComponentPropsWithoutRef<'label'> {
    as: 'label';
}
interface Paragraph extends TextOptions, ComponentPropsWithoutRef<'p'> {
    as: 'p';
}
interface Div extends TextOptions, ComponentPropsWithoutRef<'div'> {
    as: 'div';
}
interface Li extends TextOptions, ComponentPropsWithoutRef<'li'> {
    as: 'li';
}
interface Span extends TextOptions, ComponentPropsWithoutRef<'span'> {
    as?: 'span';
}
type TextProps = Span | Label | Paragraph | Div | Li;

/**
 * Text Area is a field for text values that can take up more than one line in a form, such as descriptions or comments.
 * @status stable
 * @example
 * <Textarea label="Label" maxLength={120} optional resizable={false} />
 */
declare const Textarea: react__default.ForwardRefExoticComponent<TextareaOptions & Omit<Omit<react__default.DetailedHTMLProps<react__default.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, "ref">, "onChange"> & react__default.RefAttributes<HTMLTextAreaElement>>;
interface TextareaOptions {
    /**
     * Whether is in error state
     */
    error?: boolean;
    /**
     * Whether the textarea is optional or not
     */
    optional?: boolean;
    /**
     * Whether the textarea is resizable or not
     * @default true
     */
    resizable?: boolean;
    /**
     * Callback for value change
     */
    onChange?: react__default.Dispatch<react__default.SetStateAction<any>>;
}
type TextareaProps = TextareaOptions & Omit<ComponentPropsWithoutRef<'textarea'>, 'onChange'>;

/**
 * Toast dispatcher function
 * @example
 * toast.informational('Message!')
 */
declare const toast: {
    informational(message: ToastMessage): string;
    success(message: ToastMessage): string;
    critical(message: ToastMessage): string;
    warning(message: ToastMessage): string;
    loading(message: ToastMessage): string;
    promise(promise: Promise<any>, messages: ToastPromiseMessages): Promise<any>;
    dismiss: (toastId?: string) => void;
};
type ToastMessage = JSX.Element | string;
interface ToastPromiseMessages {
    success: ToastMessage;
    loading: ToastMessage;
    error: ToastMessage;
}

/**
 * Toasts can appear at any time to provide instant feedback on actions. They are usually temporary, but can also require the user to dismiss.
 * @status stable
 * @example
 * <ToastStack />
 */
declare function ToastStack(props: ToastStackProps): react_jsx_runtime.JSX.Element;
interface ToastStackOptions {
    /**
     * Postion of the toasts
     * @default 'bottom-right'
     */
    position?: 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';
    /**
     * Options of each toast
     */
    toastOptions?: DefaultToastOptions;
    /**
     * Wether should invert the order
     */
    reverseOrder?: boolean;
    /**
     * Position distance
     * @default 16
     */
    gutter?: number;
}
type ToastStackProps = ToastStackOptions;

/**
 * Tooltips display a label that was omitted when hovering the element. They shouldn't be essential for users to complete tasks.
 * @status stable
 * @example
 * <Tooltip text="Text">
 *   <button>i</button>
 * </Tooltip>
 */
declare const Tooltip: react.ForwardRefExoticComponent<TooltipOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
type InheritedOptions = Pick<TooltipProviderProps, 'placement' | 'open' | 'setOpen' | 'defaultOpen' | 'timeout'>;
interface TooltipOptions extends InheritedOptions {
    /**
     * Text displayed on the popover
     */
    label: ReactNode;
}
type TooltipProps = TooltipOptions & ComponentPropsWithoutRef<'span'>;

/**
 * The anchor of the Tooltip
 * @example
 * <TooltipProvider>
 *  <TooltipTrigger asChild>
 *    <button>i</button>
 *  </TooltipTrigger>
 * </TooltipProvider>
 */
declare const TooltipTrigger: react.ForwardRefExoticComponent<TooltipTriggerOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TooltipTriggerOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type TooltipTriggerProps = TooltipTriggerOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Popover of the Tooltip
 * @example
 * <TooltipProvider>
 *  <TooltipPopover>
 *    Text
 *  </TooltipPopover>
 * </TooltipProvider>
 */
declare const TooltipPopover: react.ForwardRefExoticComponent<TooltipPopoverOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TooltipPopoverOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
    /**
     * Distance (in px) from the trigger reference
     * @default 2
     */
    gutter?: number;
}
type TooltipPopoverProps = TooltipPopoverOptions & ComponentPropsWithoutRef<'div'>;

/**
 * Arrow of the Tooltip
 * @example
 * <TooltipProvider>
 *  <TooltipPopover>
 *    <TooltipAnchor />
 *  </TooltipPopover>
 * </TooltipProvider>
 */
declare const TooltipArrow: react.ForwardRefExoticComponent<TooltipArrowOptions & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
interface TooltipArrowOptions {
    /**
     * Children composition
     * @default false
     */
    asChild?: boolean;
}
type TooltipArrowProps = TooltipArrowOptions & ComponentPropsWithoutRef<'div'>;

/**
 * A Date Picker is a field for single date values that may include time. The date can be typed or selected with the help of a Calendar.
 * @status stable
 * @example
 * <DatePicker />
 */
declare function DatePicker<T extends DateValue>(props: DatePickerProps<T>): react_jsx_runtime.JSX.Element;
interface DatePickerOptions<T extends DateValue> extends Omit<AriaDatePickerProps<T>, 'label'> {
    /**
     * Custom className
     */
    className?: string;
    /**
     * Wether has error
     */
    error?: boolean;
    /**
     * Should activate portal
     * @default true
     */
    portal?: boolean;
}
type DatePickerProps<T extends DateValue> = DatePickerOptions<T>;

/**
 * Allow users to select a date range
 * @status stable
 * @example
 * <RangeCalendar />
 */
declare function RangeCalendar<T extends DateValue$1>(props: RangeCalendarProps<T>): react_jsx_runtime.JSX.Element;
type RangeCalendarOptions<T extends DateValue$1> = Omit<AriaRangeCalendarProps<T>, 'createCalendar' | 'locale'>;
type RangeCalendarProps<T extends DateValue$1> = RangeCalendarOptions<T>;

/**
 * Allow users to select a date
 * @status stable
 * @example
 * <Calendar />
 */
declare function Calendar<T extends DateValue>(props: CalendarProps<T>): react_jsx_runtime.JSX.Element;
type CalendarOptions<T extends DateValue> = Omit<AriaCalendarProps<T>, 'createCalendar' | 'locale'>;
type CalendarProps<T extends DateValue> = CalendarOptions<T>;

/**
 * Cell of a calendar grid
 */
declare function CalendarCell(props: CalendarCellProps): react_jsx_runtime.JSX.Element | null;
interface CalendarCellOptions {
    /**
     * Date that the cell represents
     */
    date: CalendarDate;
}
type CalendarCellProps = CalendarCellOptions;

/**
 * Grid of a calendar
 */
declare function CalendarGrid(props: CalendarGridProps): react_jsx_runtime.JSX.Element;
type CalendarGridOptions = AriaCalendarGridProps;
type CalendarGridProps = CalendarGridOptions;

/**
 * Header of the calendar
 */
declare function CalendarHeader(props: CalendarHeaderProps): react_jsx_runtime.JSX.Element;
interface CalendarHeaderOptions {
    /**
     * Component children
     */
    children?: ReactNode;
}
type CalendarHeaderProps = CalendarHeaderOptions;

declare const CalendarContext: react.Context<Store<CalendarState | RangeCalendarState, (cb: CalendarState | RangeCalendarState) => CalendarState | RangeCalendarState> | null>;
/**
 * Calendar state provider
 */
declare function CalendarProvider(props: CalendarProviderProps): react_jsx_runtime.JSX.Element;
interface CalendarProviderOptions {
    /**
     * Calendar store
     */
    store: Store<CalendarState | RangeCalendarState> | null;
    /**
     * Component children
     */
    children: ReactNode;
}
type CalendarProviderProps = CalendarProviderOptions;
declare function useCalendarContext(): Store<CalendarState | RangeCalendarState, (cb: CalendarState | RangeCalendarState) => CalendarState | RangeCalendarState>;
declare function isRangeCalendar(state: any): state is RangeCalendarState;

/**
 * Title of the calendar
 */
declare function CalendarTitle(props: CalendarTitleProps): react_jsx_runtime.JSX.Element;
interface CalendarTitleOptions {
    /**
     * Component children
     */
    children?: ReactNode;
}
type CalendarTitleProps = CalendarTitleOptions;

/**
 * A list of date-segments used as base for date-picker and date-range-picker
 * @status stable
 * @example
 * <DateField />
 */
declare const DateField: <T extends DateValue$1>(props: DateFieldProps<T> & react__default.RefAttributes<HTMLDivElement>) => JSX.Element | null;
interface DateFieldOptions<T extends DateValue$1> extends AriaDateFieldProps<T> {
    /**
     * Custom className
     */
    className?: string;
}
type DateFieldProps<T extends DateValue$1> = DateFieldOptions<T>;

/**
 * Segment of a DateField
 * @status stable
 */
declare const DateSegment: react.ForwardRefExoticComponent<DateSegmentOptions & react.RefAttributes<HTMLDivElement>>;
interface DateSegmentOptions {
    /**
     * Segment to render
     */
    segment: DateSegment$1;
    /**
     * State of a Datefield
     */
    state: DateFieldState;
}
type DateSegmentProps = DateSegmentOptions;

/**
 * A Date Range Picker is a field for date period values that may include time. The date can be typed or selected in a Calendar.
 * @status stable
 * @example
 * <DateRangePicker />
 */
declare function DateRangePicker<T extends DateValue>(props: DateRangePickerProps<T>): react_jsx_runtime.JSX.Element;
interface DateRangePickerOptions<T extends DateValue> extends Omit<AriaDateRangePickerProps<T>, 'label'> {
    /**
     * Custom className
     */
    className?: string;
    /**
     * Wether has error
     */
    error?: boolean;
}
type DateRangePickerProps<T extends DateValue> = DateRangePickerOptions<T>;

/**
 * A Time Input is a field for a single time value.
 * @status stable
 * @example
 * <TimeInput />
 */
declare const TimeInput: <T extends TimeValue>(props: TimeInputProps<T> & react__default.RefAttributes<HTMLDivElement>) => JSX.Element | null;
interface TimeInputOptions<T extends TimeValue> extends Omit<AriaTimeFieldProps<T>, 'locale' | 'label'> {
    /**
     * Custom className
     */
    className?: string;
    /**
     * Wether has error
     */
    error?: boolean;
}
type TimeInputProps<T extends TimeValue> = TimeInputOptions<T>;

declare const presetSunrise: ShorelineConfig;

declare const IconAlarm: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArchive: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowCounterClockwise: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowDownSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowDown: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowLeft: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowLineDown: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowLineUp: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowRight: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowUUpLeft: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowUpRightSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowUpRight: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowUpSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowUp: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconArrowsClockwise: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconBarcode: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconBell: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCalendarBlank: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCameraFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCaretDownSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCaretDown: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCaretLeftSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCaretLeft: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCaretRightSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCaretRight: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCaretUpDownSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCaretUpSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCaretUp: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconChartBar: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconChartLineUp: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconChatCircle: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconChatText: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCheckCircleFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCheckCircle: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCheckSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCheck: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCirclesThreePlusFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconClockClockwise: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconClock: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCloudArrowUp: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCode: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCoffee: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCopySimple: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCornersIn: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCornersOut: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCreditCard: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCube: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCurrencyCircleDollar: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconDotsSixVerticalSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconDotsSixVertical: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconDotsThreeVertical: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconEnvelopeSimpleFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconEnvelopeSimple: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconEyeSlash: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconEye: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconFaders: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconFileText: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconFlag: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconGearSix: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconGift: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconGlobeHemisphereWest: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconHandPointingFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconHandbagSimple: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconHeadset: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconHeart: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconHouse: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconIdentificationCard: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconImageSquareFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconImageSquare: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconInfoFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconInfo: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconKey: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconLayout: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconLinkBreak: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconLinkSimpleFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconLinkSimple: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconListBullets: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconListNumbers: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconList: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconLockKeyOpen: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconLockKey: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconMagnifyingGlassPlus: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconMagnifyingGlassSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconMagnifyingGlass: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconMapPin: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconMegaphoneFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconMegaphone: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconMinusCircleFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconMinusSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconMinus: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconNewspaper: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconNotebook: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconPaperPlaneTilt: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconPaperclip: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconPauseCircle: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconPencil: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconPlayCircleFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconPlayCircle: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconPlusCircle: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconPlus: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconPrinter: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconProhibit: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconPulse: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconQuestion: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconReceipt: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconRocketLaunch: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconRows: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconShareNetworkFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconShareNetwork: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconShoppingCartSimple: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconSignOut: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconSlidersFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconSparkleFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconSparkle: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconSquaresFour: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconStack: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconStarFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconStar: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconStorefront: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTagFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTag: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTextAlignCenter: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTextAlignLeft: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTextAlignRight: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTextB: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTextItalic: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTextUnderline: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTicket: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTrash: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTreeStructureFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTrendDownFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTrendUpFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconTruck: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconUniteFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconUser: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconUsers: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconVideoCameraFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconWarningCircleFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconWarningCircle: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconXCircleFill: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconXCircle: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconXSmall: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconX: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

declare const IconCounterClockwise: react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & react.RefAttributes<SVGSVGElement>>;

export { AccessibleIcon, type AccessibleIconProps, Alert, type AlertProps, Bleed, type BleedProps, Button, type ButtonProps, Calendar, CalendarCell, CalendarContext, CalendarGrid, type CalendarGridProps, CalendarHeader, type CalendarHeaderProps, type CalendarProps, CalendarProvider, CalendarTitle, type CalendarTitleProps, Center, type CenterProps, Checkbox, CheckboxGroup, type CheckboxGroupProps, type CheckboxProps, Clickable, ClickableBubble, type ClickableBubbleProps, type ClickableProps, Collection, type CollectionProps, CollectionRow, type CollectionRowProps, CollectionView, type CollectionViewProps, ComboboxInput, type ComboboxInputProps, ComboboxItem, type ComboboxItemProps, ComboboxList, type ComboboxListProps, ComboboxPopover, type ComboboxPopoverProps, Composable, type ComposableProps, Compose, type ComposeProps, ConfirmationModal, type ConfirmationModalProps, Container, type ContainerProps, Content, type ContentProps, ContextualHelp, type ContextualHelpProps, DateField, type DateFieldProps, DatePicker, type DatePickerProps, DateRangePicker, type DateRangePickerProps, DateSegment, type DateSegmentProps, Divider, type DividerProps, DrawerContent, type DrawerContentProps, DrawerDismiss, type DrawerDismissProps, DrawerFooter, type DrawerFooterProps, DrawerHeader, type DrawerHeaderProps, DrawerHeading, type DrawerHeadingProps, DrawerPopover, type DrawerPopoverProps, DrawerProvider, type DrawerProviderProps, DrawerTrigger, type DrawerTriggerProps, EmptyState, EmptyStateActions, type EmptyStateActionsProps, EmptyStateIllustration, type EmptyStateIllustrationProps, type EmptyStateProps, Field, FieldCharCounter, type FieldCharCounterProps, FieldContext, type FieldContextType, FieldDescription, type FieldDescriptionProps, FieldError, type FieldErrorProps, type FieldProps, FieldProvider, type FieldProviderProps, Filter, FilterApply, type FilterApplyProps, FilterClear, type FilterClearProps, FilterContext, FilterItem, FilterItemCheck, type FilterItemCheckProps, type FilterItemProps, FilterList, type FilterListProps, FilterListSkeleton, type FilterListSkeletonProps, FilterPopover, type FilterPopoverProps, type FilterProps, FilterProvider, type FilterProviderProps, FilterTrigger, type FilterTriggerProps, FilterValue, type FilterValueProps, Flex, type FlexProps, Grid, GridCell, type GridCellProps, type GridProps, Heading, type HeadingProps, IconAlarm, IconArchive, IconArrowCounterClockwise, IconArrowDown, IconArrowDownSmall, IconArrowLeft, IconArrowLineDown, IconArrowLineUp, IconArrowRight, IconArrowUUpLeft, IconArrowUp, IconArrowUpRight, IconArrowUpRightSmall, IconArrowUpSmall, IconArrowsClockwise, IconBarcode, IconBell, IconButton, type IconButtonProps, IconCalendarBlank, IconCameraFill, IconCaretDown, IconCaretDownSmall, IconCaretLeft, IconCaretLeftSmall, IconCaretRight, IconCaretRightSmall, IconCaretUp, IconCaretUpDownSmall, IconCaretUpSmall, IconChartBar, IconChartLineUp, IconChatCircle, IconChatText, IconCheck, IconCheckCircle, IconCheckCircleFill, IconCheckSmall, IconCirclesThreePlusFill, IconClock, IconClockClockwise, IconCloudArrowUp, IconCode, IconCoffee, IconCopySimple, IconCornersIn, IconCornersOut, IconCounterClockwise, IconCreditCard, IconCube, IconCurrencyCircleDollar, IconDotsSixVertical, IconDotsSixVerticalSmall, IconDotsThreeVertical, IconEnvelopeSimple, IconEnvelopeSimpleFill, IconEye, IconEyeSlash, IconFaders, IconFileText, IconFlag, IconGearSix, IconGift, IconGlobeHemisphereWest, IconHandPointingFill, IconHandbagSimple, IconHeadset, IconHeart, IconHouse, IconIdentificationCard, IconImageSquare, IconImageSquareFill, IconInfo, IconInfoFill, IconKey, IconLayout, IconLinkBreak, IconLinkSimple, IconLinkSimpleFill, IconList, IconListBullets, IconListNumbers, IconLockKey, IconLockKeyOpen, IconMagnifyingGlass, IconMagnifyingGlassPlus, IconMagnifyingGlassSmall, IconMapPin, IconMegaphone, IconMegaphoneFill, IconMinus, IconMinusCircleFill, IconMinusSmall, IconNewspaper, IconNotebook, IconPaperPlaneTilt, IconPaperclip, IconPauseCircle, IconPencil, IconPlayCircle, IconPlayCircleFill, IconPlus, IconPlusCircle, IconPrinter, IconProhibit, IconPulse, IconQuestion, IconReceipt, IconRocketLaunch, IconRows, IconShareNetwork, IconShareNetworkFill, IconShoppingCartSimple, IconSignOut, IconSlidersFill, IconSparkle, IconSparkleFill, IconSquaresFour, IconStack, IconStar, IconStarFill, IconStorefront, IconTag, IconTagFill, IconTextAlignCenter, IconTextAlignLeft, IconTextAlignRight, IconTextB, IconTextItalic, IconTextUnderline, IconTicket, IconTrash, IconTreeStructureFill, IconTrendDownFill, IconTrendUpFill, IconTruck, IconUniteFill, IconUser, IconUsers, IconVideoCameraFill, IconWarningCircle, IconWarningCircleFill, IconX, IconXCircle, IconXCircleFill, IconXSmall, Input, type InputProps, Label$1 as Label, type LabelProps, Link, LinkBox, type LinkBoxProps, type LinkProps, LocaleProvider, type LocaleProviderProps, Menu, MenuItem, type MenuItemProps, MenuPopover, type MenuPopoverProps, type MenuProps, MenuProvider, type MenuProviderProps, MenuSeparator, type MenuSeparatorProps, MenuTrigger, Modal, ModalContent, type ModalContentProps, ModalDismiss, type ModalDismissProps, ModalFooter, type ModalFooterProps, ModalHeader, type ModalHeaderProps, ModalHeading, type ModalHeadingProps, type ModalProps, type NavigationTarget, Page, PageContent, type PageContentProps, PageHeader, type PageHeaderProps, PageHeaderRow, type PageHeaderRowProps, PageHeading, type PageProps, Pagination, type PaginationProps, Popover, PopoverDismiss, type PopoverDismissProps, type PopoverProps, PopoverTrigger, type PopoverTriggerProps, Radio, RadioGroup, type RadioGroupProps, type RadioGroupState, type RadioProps, RangeCalendar, type RangeCalendarProps, Search, type SearchProps, Select, SelectItem, SelectItemCheck, type SelectItemCheckProps, type SelectItemProps, SelectList, type SelectListProps, SelectPopover, type SelectPopoverProps, type SelectProps, SelectTrigger, type SelectTriggerProps, Skeleton, type SkeletonProps, Spinner, type SpinnerProps, Stack, type StackProps, Tab, TabList, type TabListProps, TabPanel, type TabPanelOptions, type TabPanelProps, type TabProps, Table, TableBody, type TableBodyProps, TableCell, type TableCellProps, TableHeader, TableHeaderCell, type TableHeaderCellProps, type TableHeaderProps, type TableOptions, type TableProps, TableRow, type TableRowProps, TableSortIndicator, type TableSortIndicatorProps, Tag, type TagProps, Text, type TextProps, Textarea, type TextareaProps, TimeInput, type TimeInputProps, ToastStack, type ToastStackProps, Tooltip, TooltipArrow, type TooltipArrowProps, TooltipPopover, type TooltipPopoverProps, type TooltipProps, TooltipTrigger, type TooltipTriggerProps, VisuallyHidden, type VisuallyHiddenProps, createMessageHook, isComposable, isRangeCalendar, navigate, presetSunrise, toast, useCalendarContext, useFieldContext, useFilterContext, useLocale, useRadioState };
