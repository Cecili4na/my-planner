{"version":3,"sources":["../src/index.ts","../src/constants.ts","../src/is-types.ts","../src/chain.ts","../src/token.ts","../src/css-var.ts","../src/cx.ts","../src/is-native-handler.ts","../src/merge-props.ts","../src/merge-refs.ts","../src/merge.ts","../src/flatten-object.ts","../src/to-var.ts","../src/parse-tokens.ts","../src/forward-ref.ts","../src/can-use-dom.ts","../src/use-id.ts","../src/use-safe-layout-effect.ts","../src/use-merge-ref.ts","../src/has-some-text-selected.ts","../src/string-case.ts","../src/invariant.ts","../src/warning.ts","../src/use-controlled-state.ts","../src/style.ts","../src/shallow-compare.ts","../src/store.ts","../src/use-store.ts"],"sourcesContent":["import { chain } from './chain'\nimport { cssVar } from './css-var'\nimport { cx } from './cx'\nimport { isNativeHandler } from './is-native-handler'\nimport { isFunction, isString, isStringEmpty } from './is-types'\nimport { mergeProps } from './merge-props'\nimport { mergeRefs } from './merge-refs'\nimport { merge } from './merge'\nimport { flattenObject } from './flatten-object'\nimport { parseTokens } from './parse-tokens'\nimport { isToken, cleanTokenString } from './token'\nimport { constants } from './constants'\nimport { forwardRef } from './forward-ref'\nimport { canUseDOM } from './can-use-dom'\nimport { useId } from './use-id'\nimport { useMergeRef } from './use-merge-ref'\nimport { useSafeLayoutEffect } from './use-safe-layout-effect'\nimport { hasSomeTextSelected } from './has-some-text-selected'\nimport { toVar } from './to-var'\nimport {\n  pascalCase,\n  camelCase,\n  kebabCase,\n  snakeCase,\n  isUppercase,\n  lowerFirst,\n  splitByCase,\n  upperFirst,\n} from './string-case'\nimport { invariant } from './invariant'\nimport { warning } from './warning'\nimport { useControlledState } from './use-controlled-state'\nimport { style } from './style'\nimport { shallowCompare } from './shallow-compare'\nimport { Store } from './store'\nimport { useStore } from './use-store'\n\nexport {\n  chain,\n  cssVar,\n  isFunction,\n  isNativeHandler,\n  cx,\n  flattenObject,\n  mergeProps,\n  mergeRefs,\n  merge,\n  parseTokens,\n  isToken,\n  cleanTokenString,\n  constants,\n  isString,\n  isStringEmpty,\n  forwardRef,\n  canUseDOM,\n  useId,\n  useMergeRef,\n  useSafeLayoutEffect,\n  hasSomeTextSelected,\n  toVar,\n  pascalCase,\n  camelCase,\n  kebabCase,\n  snakeCase,\n  isUppercase,\n  lowerFirst,\n  splitByCase,\n  upperFirst,\n  invariant,\n  warning,\n  useControlledState,\n  style,\n  shallowCompare,\n  Store,\n  useStore,\n}\n\nexport * from './css-types'\nexport * from './utility-types'\n","export const constants = {\n  tokenPrefix: '$',\n  dsPrefix: 'sl',\n  comma: ',',\n  whiteSpace: ' ',\n  emptyString: '',\n}\n","import { constants } from './constants'\nimport type { AnyFunction } from './utility-types'\n\n/**\n * Returns wether a value is a function\n * @example\n * isFunction(() => {}) // true\n */\nexport function isFunction<T extends AnyFunction = AnyFunction>(\n  value: any\n): value is T {\n  return typeof value === 'function'\n}\n\n/**\n * Returns wether a value is a string and is empty\n * @example\n * isStringEmpty('') => true\n * isStringEmpty(' ') => true\n */\nexport function isStringEmpty<T extends string = string>(\n  value: unknown\n): value is T {\n  return isString(value) && value.trim() === constants.emptyString\n}\n\n/**\n * Returns wether a value is a string\n * @example\n * isString('') => true\n * isString(1) => false\n */\nexport function isString<T extends string = string>(\n  value: unknown\n): value is T {\n  return typeof value === 'string'\n}\n","import { isFunction } from './is-types'\nimport type { AnyFunction } from './utility-types'\n\n/**\n * Receives functions as arguments and returns a new function that calls all.\n * @example\n * const fnX = () => {}\n * const fnY = () => {}\n * const fnXY = chain(fnx, fnY)\n * fnXY() // same as fnX() fnY()\n */\nexport function chain<T>(...fns: T[]) {\n  return (...args: T extends AnyFunction ? Parameters<T> : never) => {\n    for (const fn of fns) {\n      if (isFunction(fn)) {\n        fn(...(args as any))\n      }\n    }\n  }\n}\n","import { constants } from './constants'\nimport { isString } from './is-types'\n\n/**\n * Returns wether a string is a token\n * @example\n * isToken('token') => false\n * isToken('$token') => true\n */\nexport function isToken(token: unknown): token is string {\n  return isString(token) && token.startsWith(constants.tokenPrefix)\n}\n\n/**\n * Cleans the token symbol from a string\n * @param {String} token String to clean\n * @returns {String} Clean string\n * @example\n * cleanTokenString('$token') // returns => 'token'\n * cleanTokenString('token') // returns => 'token'\n */\nexport function cleanTokenString(token: string): string {\n  if (isToken(token)) {\n    const sanitizedToken = String(token).trim()\n\n    return sanitizedToken.substring(1)\n  }\n\n  return token\n}\n","import { constants } from './constants'\nimport { isToken, cleanTokenString } from './token'\nimport { isStringEmpty } from './is-types'\n\n/**\n * Returns a token as css variable\n */\nexport function cssVar(props: CssVarProps): string {\n  const { token, deepSearch = false, prefix = constants.dsPrefix } = props\n\n  if (!token || isStringEmpty(token)) {\n    return constants.emptyString\n  }\n\n  if (deepSearch) {\n    return _deepParse(token, prefix)\n  }\n\n  return tokenToVar(token, prefix)\n}\n\nfunction tokenToVar(token: string, prefix: string): string {\n  if (!isToken(token)) {\n    return token\n  }\n\n  const cleanedToken = cleanTokenString(token)\n\n  if (cleanedToken.endsWith(constants.comma)) {\n    return `var(--${prefix}-${cleanedToken.slice(0, -1)}),`\n  }\n\n  return `var(--${prefix}-${cleanedToken})`\n}\n\nfunction _deepParse(token: string, prefix: string): string {\n  const tokenizedValues = token\n    .trim()\n    .split(constants.whiteSpace)\n    .map((value: string) => {\n      return tokenToVar(value, prefix)\n    })\n\n  return tokenizedValues.join(constants.whiteSpace)\n}\n\ninterface CssVarProps {\n  /**\n   * Value of the foundation\n   */\n  token: string\n  /**\n   * Search for the entire string\n   * @default false\n   */\n  deepSearch?: boolean\n  /**\n   * Prefix of the variable\n   * @default 'sl'\n   */\n  prefix?: string\n}\n","import { constants } from './constants'\n\ntype CxArgs = Array<string | null | undefined>\n\n/**\n * Spaces classNames properly\n * @param args: classnames to be combined\n * @returns {String} Classnames properly spaced\n * @example\n * cx('cn1', 'cn2') // returns => 'cn1 cn2'\n */\nexport function cx(...args: CxArgs): string {\n  const classNames = args.reduce((acc, argument) => {\n    if (!argument) {\n      return acc ?? constants.emptyString\n    }\n\n    const trimmedArgument = argument.trim()\n    const trimmedClassNames =\n      `${acc}${constants.whiteSpace}${trimmedArgument}`.trim()\n\n    return trimmedClassNames\n  }, constants.emptyString)\n\n  return classNames ?? constants.emptyString\n}\n","/**\n * Returns true if propName is a handler\n * @example\n * isNativeHandler('onChange') // true\n * isNativeHandler('handleChange') // false\n */\nexport function isNativeHandler(propName: string): boolean {\n  return (\n    propName[0] === 'o' &&\n    propName[1] === 'n' &&\n    propName.charCodeAt(2) >= /* 'A' */ 65 &&\n    propName.charCodeAt(2) <= /* 'Z' */ 90\n  )\n}\n","import { chain } from './chain'\nimport { cx } from './cx'\nimport { isFunction, isString } from './is-types'\nimport type {\n  TupleTypes,\n  UnionToIntersection,\n  AnyObject,\n} from './utility-types'\nimport { isNativeHandler } from './is-native-handler'\n\ntype MergePropsArgs = AnyObject | null | undefined\n\n/**\n * Merges multiple props objects together combining classNames and chaining events.\n * @example\n * const propsA = {}\n * const propsB = {}\n * mergeProps(propsA, propsB)\n */\nexport function mergeProps<T extends MergePropsArgs[]>(\n  ...args: T\n): UnionToIntersection<TupleTypes<T>> {\n  const mergedProps: AnyObject = { ...args[0] }\n\n  for (let i = 1; i < args.length; i++) {\n    const props = args[i]\n\n    for (const prop in props) {\n      const a = mergedProps[prop]\n      const b = props[prop]\n\n      if (isFunction(a) && isFunction(b) && isNativeHandler(prop)) {\n        mergedProps[prop] = chain(a, b) // chain events\n      } else if (prop === 'className' && isString(a) && isString(b)) {\n        mergedProps[prop] = cx(a, b) // merge classNames\n      } else {\n        mergedProps[prop] = b !== undefined ? b : a // override previous props\n      }\n    }\n  }\n\n  return mergedProps as UnionToIntersection<TupleTypes<T>>\n}\n","import type { ForwardedRef } from 'react'\n\n/**\n * Merges multiple refs into one. Works with either callback or object refs.\n * @example\n * const refA = useRef()\n * const refB = useRef()\n * const ref = mergeRefs(refA, refB)\n */\nexport function mergeRefs(\n  ...refs: Array<ForwardedRef<any>>\n): ForwardedRef<any> {\n  if (refs.length === 1) {\n    return refs[0]\n  }\n\n  return (value: any) => {\n    for (const ref of refs) {\n      if (typeof ref === 'function') {\n        ref(value)\n      } else if (ref != null) {\n        ref.current = value\n      }\n    }\n  }\n}\n","import deepmerge from 'deepmerge'\n\nexport function merge(...params: any): any {\n  return deepmerge.all([...params].filter((p) => p))\n}\n","import type { AnyObject, Dict } from './utility-types'\n\nexport function flattenObject<T extends AnyObject>(\n  object: T,\n  joinString = '-',\n  defaultString = '*'\n): Dict {\n  const result: Dict = {}\n\n  for (const i in object) {\n    if (typeof object[i] === 'object' && !Array.isArray(object[i])) {\n      const temp = flattenObject(object[i], joinString, defaultString)\n\n      for (const j in temp) {\n        if (j === defaultString) {\n          result[`${i}`] = temp[j]\n        } else {\n          result[`${i}${joinString}${j}`] = temp[j]\n        }\n      }\n    } else {\n      result[i] = object[i]\n    }\n  }\n\n  return result\n}\n","import { constants } from './constants'\n\n/**\n * Parse a prefix-value to a CSS Variable declaration\n * @param {string} value\n * @param {string} prefix\n */\nexport function toVar(value: string, prefix: string = constants.dsPrefix) {\n  return `--${prefix}-${value}`\n}\n","import type { AnyObject, Dict } from './utility-types'\nimport { constants } from './constants'\nimport { cssVar } from './css-var'\nimport { flattenObject } from './flatten-object'\nimport { toVar } from './to-var'\n\n/**\n * Parse token from the config to a Token Dict.\n */\nexport function parseTokens(props: ParseTokensProps): Dict {\n  const { tokens = {}, unprefixed = false, prefix = constants.dsPrefix } = props\n\n  const flatTokens = flattenObject(tokens)\n  const tokenDict: Dict = {}\n\n  for (const key in flatTokens) {\n    const token = flatTokens[key as keyof typeof flatTokens]\n\n    const resultKey = unprefixed ? key : toVar(key, prefix)\n\n    tokenDict[resultKey] = cssVar({ token, deepSearch: true, prefix })\n  }\n\n  return tokenDict\n}\n\ninterface ParseTokensProps {\n  tokens: AnyObject\n  unprefixed?: boolean\n  prefix?: string\n}\n","import * as React from 'react'\nimport type { AnyObject } from './utility-types'\n\n/**\n * Augmented forwardRef function to support generics\n */\nexport function forwardRef<T, P = AnyObject>(\n  render: (props: P, ref: React.Ref<T>) => JSX.Element | null\n): (props: P & React.RefAttributes<T>) => JSX.Element | null {\n  return React.forwardRef(render as any) as unknown as (\n    props: P & React.RefAttributes<T>\n  ) => JSX.Element | null\n}\n","/**\n * It's `true` if it is running in a browser environment or `false` if it is not\n * (SSR).\n * @example\n * const title = canUseDOM ? document.title : \"\";\n */\nexport const canUseDOM = checkIsBrowser()\n\n// Check if we can use the DOM. Useful for SSR purposes\nfunction checkIsBrowser() {\n  return typeof window !== 'undefined' && !!window.document?.createElement\n}\n","import * as React from 'react'\nimport { useSafeLayoutEffect } from './use-safe-layout-effect'\n\nconst _React = { ...React }\nconst useReactId = _React.useId\n\n/**\n * Generates a unique ID. Uses React's useId if available.\n */\nexport function useId(defaultId?: string): string {\n  if (useReactId) {\n    const reactId = useReactId()\n\n    if (defaultId) return defaultId\n\n    return reactId\n  }\n\n  const [id, setId] = React.useState(defaultId)\n\n  useSafeLayoutEffect(() => {\n    if (defaultId || id) return\n    const random = Math.random().toString(36).substr(2, 6)\n\n    setId(`id-${random}`)\n  }, [defaultId, id])\n\n  return defaultId || String(id)\n}\n","import * as React from 'react'\nimport { canUseDOM } from './can-use-dom'\n\n/**\n * `React.useLayoutEffect` that fallbacks to `React.useEffect` on server side.\n */\nexport const useSafeLayoutEffect = canUseDOM\n  ? React.useLayoutEffect\n  : React.useEffect\n","import type { MutableRefObject, Ref, RefCallback } from 'react'\nimport { useMemo } from 'react'\n\n/**\n * Sets both a function and object React ref.\n */\nfunction setRef<T>(\n  ref: RefCallback<T> | MutableRefObject<T> | null | undefined,\n  value: T\n) {\n  if (typeof ref === 'function') {\n    ref(value)\n  } else if (ref) {\n    ref.current = value\n  }\n}\n\n/**\n * Merges React Refs into a single memoized function ref so you can pass it to\n * an element.\n * @example\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRef(internalRef, ref)} />;\n * });\n */\nexport function useMergeRef(...refs: Array<Ref<any> | undefined>) {\n  return useMemo(() => {\n    if (!refs.some(Boolean)) return\n\n    return (value: any) => {\n      refs.forEach((ref) => {\n        setRef(ref, value)\n      })\n    }\n  }, refs)\n}\n","import { canUseDOM } from './can-use-dom'\n\n/**\n * Returns true if the user is selecting some text\n */\nexport function hasSomeTextSelected(): boolean {\n  if (!canUseDOM) return false\n\n  return !!window?.getSelection?.()?.toString()\n}\n","import {\n  pascalCase,\n  camelCase,\n  kebabCase,\n  snakeCase,\n  isUppercase,\n  lowerFirst,\n  splitByCase,\n  upperFirst,\n} from 'scule'\n\nexport {\n  pascalCase,\n  camelCase,\n  kebabCase,\n  snakeCase,\n  isUppercase,\n  lowerFirst,\n  splitByCase,\n  upperFirst,\n}\n","import invariant from 'tiny-invariant'\n\nexport { invariant }\n","import warning from 'tiny-warning'\n\nexport { warning }\n","/* From react stately - https://github.com/adobe/react-spectrum/blob/main/packages/%40react-stately/utils/src/useControlledState.ts */\nimport { useCallback, useEffect, useRef, useState } from 'react'\n\nexport function useControlledState<T, C = T>(\n  value: Exclude<T, undefined>,\n  defaultValue: Exclude<T, undefined> | undefined,\n  onChange?: (v: C, ...args: any[]) => void\n): [T, (value: T) => void]\n\nexport function useControlledState<T, C = T>(\n  value: Exclude<T, undefined> | undefined,\n  defaultValue: Exclude<T, undefined>,\n  onChange?: (v: C, ...args: any[]) => void\n): [T, (value: T) => void]\n\nexport function useControlledState<T, C = T>(\n  value: T,\n  defaultValue: T,\n  onChange?: (v: C, ...args: any[]) => void\n): [T, (value: T) => void] {\n  const [stateValue, setStateValue] = useState(value || defaultValue)\n  const isControlledRef = useRef(value !== undefined)\n  const isControlled = value !== undefined\n\n  useEffect(() => {\n    const wasControlled = isControlledRef.current\n\n    if (wasControlled !== isControlled) {\n      console.warn(\n        `WARN: A component changed from ${\n          wasControlled ? 'controlled' : 'uncontrolled'\n        } to ${isControlled ? 'controlled' : 'uncontrolled'}.`\n      )\n    }\n\n    isControlledRef.current = isControlled\n  }, [isControlled])\n\n  let currentValue = isControlled ? value : stateValue\n\n  const setValue = useCallback(\n    (value: any, ...args: any[]) => {\n      const onChangeCaller = (value: any, ...onChangeArgs: any[]) => {\n        if (onChange) {\n          if (!Object.is(currentValue, value)) {\n            onChange(value, ...onChangeArgs)\n          }\n        }\n\n        if (!isControlled) {\n          // If uncontrolled, mutate the currentValue local variable so that\n          // calling setState multiple times with the same value only emits onChange once.\n          // We do not use a ref for this because we specifically _do_ want the value to\n          // reset every render, and assigning to a ref in render breaks aborted suspended renders.\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          currentValue = value\n        }\n      }\n\n      if (typeof value === 'function') {\n        console.warn(\n          'We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320'\n        )\n        // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n        // when someone using useControlledState calls setControlledState(myFunc)\n        // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n        // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n        // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n        const updateFunction = (oldValue: any, ...functionArgs: any[]) => {\n          const interceptedValue = value(\n            isControlled ? currentValue : oldValue,\n            ...functionArgs\n          )\n\n          onChangeCaller(interceptedValue, ...args)\n          if (!isControlled) {\n            return interceptedValue\n          }\n\n          return oldValue\n        }\n\n        setStateValue(updateFunction)\n      } else {\n        if (!isControlled) {\n          setStateValue(value)\n        }\n\n        onChangeCaller(value, ...args)\n      }\n    },\n    [isControlled, currentValue, onChange]\n  )\n\n  return [currentValue, setValue]\n}\n","import type { CSSProperties } from 'react'\nimport { cssVar } from './css-var'\nimport type { AnyObject } from './utility-types'\n\nexport interface ShorelineCSSProperties extends CSSProperties {\n  [key: `--${string}`]: string | number | boolean\n}\n\n/**\n * Applies css variables on style\n * @example\n * <div style={style({ padding: '$space-3' })} />\n */\nexport function style(cssProps: ShorelineCSSProperties): CSSProperties {\n  const result: AnyObject = {}\n\n  for (const prop in cssProps) {\n    const value = cssProps[prop as keyof ShorelineCSSProperties]\n    const variable =\n      typeof value === 'string'\n        ? cssVar({ token: String(value), deepSearch: true })\n        : value\n\n    result[prop] = variable\n  }\n\n  return result as CSSProperties\n}\n","export function shallowCompare<T>(objA: T, objB: T) {\n  if (Object.is(objA, objB)) {\n    return true\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false\n  }\n\n  const keysA = Object.keys(objA)\n\n  if (keysA.length !== Object.keys(objB).length) {\n    return false\n  }\n\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !Object.prototype.hasOwnProperty.call(objB, keysA[i] as string) ||\n      !Object.is(objA[keysA[i] as keyof T], objB[keysA[i] as keyof T])\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n","export class Store<\n  TState,\n  TUpdater extends AnyUpdater = (cb: TState) => TState,\n> {\n  private listeners = new Set<Listener>()\n  private _state: TState\n  private _options?: StoreOptions<TState, TUpdater>\n  private _batching = false\n  private _flushing = 0\n\n  constructor(initialState: TState, options?: StoreOptions<TState, TUpdater>) {\n    this._state = initialState\n    this._options = options\n  }\n\n  public get state() {\n    return this._state\n  }\n\n  public subscribe = (listener: Listener) => {\n    this.listeners.add(listener)\n    const unsub = this._options?.onSubscribe?.(listener, this)\n\n    return () => {\n      this.listeners.delete(listener)\n      unsub?.()\n    }\n  }\n\n  public setState = (updater: TUpdater) => {\n    const previous = this._state\n\n    this._state = this._options?.updateFn\n      ? this._options.updateFn(previous)(updater)\n      : (updater as any)(previous)\n\n    // Always run onUpdate, regardless of batching\n    this._options?.onUpdate?.()\n\n    // Attempt to flush\n    this._flush()\n  }\n\n  public _flush = () => {\n    if (this._batching) return\n    const flushId = ++this._flushing\n\n    this.listeners.forEach((listener) => {\n      if (this._flushing !== flushId) return\n      listener()\n    })\n  }\n\n  public batch = (cb: () => void) => {\n    if (this._batching) return cb()\n    this._batching = true\n    cb()\n    this._batching = false\n    this._flush()\n  }\n}\n\nexport type AnyUpdater = (...args: any[]) => any\n\ntype Listener = () => void\n\ninterface StoreOptions<\n  TState,\n  TUpdater extends AnyUpdater = (cb: TState) => TState,\n> {\n  updateFn?: (previous: TState) => (updater: TUpdater) => TState\n  onSubscribe?: (\n    listener: Listener,\n    store: Store<TState, TUpdater>\n  ) => () => void\n  onUpdate?: () => void\n}\n","import type { AnyUpdater, Store } from './store'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector.js'\nimport { shallowCompare } from './shallow-compare'\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport function useStore<\n  TState,\n  TSelected = NoInfer<TState>,\n  TUpdater extends AnyUpdater = AnyUpdater,\n>(\n  store: Store<TState, TUpdater>,\n  selector: (state: NoInfer<TState>) => TSelected = (d) => d as any\n) {\n  const slice = useSyncExternalStoreWithSelector(\n    store.subscribe,\n    () => store.state,\n    () => store.state,\n    selector,\n    shallowCompare\n  )\n\n  return slice\n}\n"],"mappings":"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","names":["forwardRef","invariant","warning","deepmerge","forwardRef","React","React","React","import_react","value"]}